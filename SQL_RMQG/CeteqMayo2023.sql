--Este es un comentario
/*
Este es un comentario
de multiples lineas
SQL - Lenguaje de consulta estructurado - (Structured Query Language)
Es un lenguaje para actualizar, obtener y calcular información en 
bases de datos relacionales

Base de datos - conjunto de datos organizados entre sí, y que son almacenados
en tablas
*/

-- La estructura de las tablas queda casi siempre de la siguiente manera:
-- Toda tabla debe llevar llave primaria. Cada registro es identificado
-- por una llave primaria (primary key, ID)
-- Puede llevar también llave foranea
-- Tipo de datos (caracteres, numéricos, tipo fecha, etc)

-- NUMBER - Datos numéricos
-- NVARCHAR2 - Permite entrada de datos de tipo caracter y alafanumericos
-- NVARCHAR2 tiene la particularidad de liberar espacio de memoria
--Por ejemplo, podemos tener un dato declarado con 30 caracteres. Pero si no
-- se utilizan esos 30 caracteres, ese espacio es liberado.
--DATE - Utilizados para manejo de fecha y hora

-- DDL - Data Definition Language - Creación de tablas y estructuras
-- DML - Data Manipulation Language - Creación de registros y manipulación
-- de los mismos

-- SENTENCIA PARA LA CREACIÓN DE TABLAS
-- VAMOS A CREAR UNA TABLA DE ALUMNOS

-- NOMBRE, APELLIDO, MATRICULA
-- EDAD. LA INFORMACIÓN DEBE ESTAR CORRECTAMENTE DEFINIDA O ATOMIZADA.
-- FECHA DE NACIMIENTO
-- SEXO O GENERO
-- GRADO DE ESTUDIOS
-- CURP
-- STATUS (ACTIVO O INACTIVO)

--RECOMIENDO AMPLIAMENTE EL USO DE MAYUSCULAS

--DESCRIBE + NOMBRE TABLA PARA VER CAMPOS
--Insertar datos en las tablas
--REVISAR CCAPTURAS EN CHAT

CREATE TABLE ALUMNO(
ID_ALUMNO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
FECHANAC DATE,
GENERO NVARCHAR2(10),
CURP NVARCHAR2(18),
GRADO NVARCHAR2(20),
STATUS NUMBER
);

-- PARA VER LA ESTRUCTURA DE MI TABLA MEDIANTE COMANDOS O SENTENCIAS
-- SE UTILIZA DESCRIBE NOMBRE DE LA TABLA;

DESCRIBE ALUMNO;

-- CREAR UNA TABLA AHORA CON CARRERAS O LICENCIATURAS PARA LOS ALUMNOS

CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
DURACION NUMBER,
CREDITOS NUMBER
);

DESCRIBE CARRERAS;

-- RENOMBRAR UNA COLUMNA EN UNA TABLA (no funciona porque no hay columna con ese nombre)
ALTER TABLE CARRERAS RENAME COLUMN NUM_MATERIAS TO MATERIAS;

-- MODIFICAR EL TIPO DE DATO EN LA COLUMNA (FUNCIONA SIEMPRE Y CUANDO
-- NO SE TENGAN DATOS EN ESA COLUMNA)
ALTER TABLE CARRERAS MODIFY DURACION NVARCHAR2(20);

DESCRIBE CARRERAS;

-- PARA RELACIONAR DATOS, POR EJEMPLO AQUI RELACIONAR A CADA ALUMNO
-- CON LA CARRERA A LA CUAL PERTENECE
-- ES MÁS FÁCIL CREAR UNA TERCERA TABLA Y ESTABLECER ESA RELACION

-- CREAR UNA TABLA LLAMADA CARRERAS_ALUMNOS

CREATE TABLE CARRERAS_ALUMNOS(
ID_CA NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_CARRERA NUMBER
);

-- CREANDO RESTRICCIONES EN NUESTRAS TABLAS
-- LAS IDENTIFICAMOS POR EL COMANDO CONSTRAINT
-- AGREGANDO UNA RESTRICCIÓN DE LLAVE FORANEA
ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO
FOREIGN KEY (ID_ALUMNO) -- EN QUE COLUMNA VAMOS A RECIBIR LA LLAVE O DATO
REFERENCES ALUMNO (ID_ALUMNO); -- DE DONDE VIENE (TABLA Y QUE COLUMNA)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA 
FOREIGN KEY (ID_CARRERA) 
REFERENCES CARRERAS (ID_CARRERA);

-- PODEMOS ESTABLECER UNA RESTRICCION RESPECTO A LO QUE QUEREMOS
-- ESCRIBIR EN UNA DETERMINADA COLUMNA
-- POR EJEMPLO EN LA TABLA ALUMNO UNICAMENTE ESCRIBIR EN LA 
-- COLUMNA DE GENERO QUE SEA SOLO 'MASCULINO' O 'FEMENINO'
ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_GENERO
CHECK (GENERO IN('MASCULINO','FEMENINO'));

--SENTENCIA PARA ELIMINAR UNA RESTRICCION
ALTER TABLE ALUMNO DROP CONSTRAINT CHECK_GENERO;

ALTER TABLE CARRERAS_ALUMNOS DROP CONSTRAINT FK_ID_CARRERA;

-- CREAR UNA RESTRICCIÓN PARA NOMBRES UNICOS O REGISTROS UNICOS
-- POR EJEMPLO, EN LA TABLA CARRERAS, TENEMOS NOMBRES DE LICENCIATURAS
-- Y PUES ESTOS NO PUEDEN SER LOS MISMOS O REPETIRSE

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE (NOMBRE);

-- INSERCIÓN DE DATOS EN NUESTRAS TABLAS
-- INSERTAR DATOS EN LA TABLA ALUMNO

DESCRIBE ALUMNO;

-- CONSULTAR EL FORMATO DE FECHA DE MI SISTEMA
SELECT SYSDATE FROM DUAL;

INSERT INTO ALUMNO VALUES
(1,'ESMERALDA','05/09/1990','FEMENINO','ESM900905MDF','8O SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(2,'OSCAR','05/09/1990','MASCULINO','ESM900905MDF','8O SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(3,'RAFAEL','15/09/1990','MASCULINO','RAF900905MDF','8O SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(4,'EDUARDO','13/01/1997','MASCULINO','EDU00905MDF','8O SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(5,'BENIGNO','30/10/1986','MASCULINO','BEN900905MDF','8O SEMESTRE',1);

-- REALIZAR UNA CONSULTA GENERAL DE LOS DATOS DE UNA TABLA
SELECT * FROM ALUMNO;

-- ACTUALIZAR UN DATO EN UN REGISTRO DETERMINADO
UPDATE ALUMNO SET FECHANAC='14/02/1982' WHERE ID_ALUMNO=2;

UPDATE ALUMNO SET CURP='OSC820214HDF' WHERE ID_ALUMNO=2;

-- REALIZAR UNA CONSULTA DE COLUMNAS ESPECIFICAS
SELECT NOMBRE FROM ALUMNO;
SELECT ID_ALUMNO,NOMBRE FROM ALUMNO;

-- CONSULTANDO UN REGISTRO DETERMINADO
SELECT * FROM ALUMNO WHERE NOMBRE='ESMERALDA';

-- COMO BORRAR UN REGISTRO ESPECIFICO DE UNA TABLA
DELETE FROM ALUMNO WHERE ID_ALUMNO=15;

SELECT * FROM ALUMNO;

-- PARA CONFIRMAR CAMBIOS EN LOS REGISTROS INSERTADOS
COMMIT;

-- INSERTAR REGISTROS EN NUESTRA TABLA DE CARRERAS
DESCRIBE CARRERAS;
INSERT INTO CARRERAS VALUES
(1,'ING EN SISTEMAS','EXACTAS','8 SEMESTRES',50);
INSERT INTO CARRERAS VALUES
(2,'MEDICINA','BIOLOGICAS','10 SEMESTRES',90);
INSERT INTO CARRERAS VALUES
(3,'NUTRICION','BIOLOGICAS','8 SEMESTRES',50);
INSERT INTO CARRERAS VALUES
(4,'DERECHO','HUMANIDADES','8 SEMESTRES',55);
INSERT INTO CARRERAS VALUES
(5,'MERCADOTECNIA','ECONOMIA','8 SEMESTRES',60);

SELECT * FROM CARRERAS;

-- YA QUE TENEMOS INFORMACION EN NUESTRAS DOS PRIMERAS TABLAS
-- QUE SON ENTIDADES FUERTES
-- PODEMOS AHORA SÍ LLENAR O RELACIONAR LOS DATOS EN LA TABLA DE
--CARRERAS_ALUMNOS

-- INSERTANDO DATOS EN LA TABLA CARRERAS_ALUMNOS
DESCRIBE CARRERAS_ALUMNOS;
INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,5);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,4);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,3,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (4,4,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (5,5,1);

SELECT * FROM CARRERAS_ALUMNOS;

COMMIT;

-- AGREGAR UNA COLUMNA A UNA TABLA
DESCRIBE CARRERAS;

ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER(8,2);

-- ACTUALIZAR UN VALOR DE UN REGISTRO
UPDATE CARRERAS SET PRESUPUESTO=200000.99 WHERE ID_CARRERA=2;
COMMIT;

-- ELIMINAR UNA COLUMNA
ALTER TABLE CARRERAS DROP COLUMN PRESUPUESTO;

INSERT INTO ALUMNO VALUES
(6,'FILOMENO','05/09/1990','MASCULINO','ESM900905MDF','8O SEMESTRE',1);

-- BORRAR UN REGISTRO (FILA)
DELETE FROM ALUMNO WHERE ID_ALUMNO=6;

SELECT * FROM ALUMNO;

-- EJERCICIO 1
-- CREAR UNA TABLA QUE SE LLAME TUTORES
-- LA TABLA DEBE LLEVAS LAS SIGUIENTES COLUMNDAS
-- ID DEL TUTOR (ID_TUTOR) PRIMARY KEY
-- NOMBRE
-- TELEFONO
-- DIRECCION
-- CLAVE DEL TUTOR (RESTRICCIÓN DE QUE LA CLAVE SOLO PUEDA SER A, B, C, D)
-- CREAN UNA TABLA RELACIONAL QUE SE LLAME
--ALUMNOS_TUTORES
-- LLEVARIA 3 COLUMNAS
-- ID DE LA TABLA
-- ID DEL ALUMNO
-- ID DEL TUTOR
-- CREAN SUS RESPECTIVAS LLAVES FORANEAS
-- CADA TABLA CON MINIMO 5 REGISTROS

-- CREANDO TABLA TUTORES
CREATE TABLE TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
TELEFONO NVARCHAR2(10),
DIRECCION NVARCHAR2(30),
CLAVE NVARCHAR2(1)
);

ALTER TABLE TUTORES ADD CONSTRAINT CHK_CLAVE_TUTOR
CHECK (CLAVE IN('A','B','C','D'));

CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_TUTOR NUMBER,
ID_ALUMNO NUMBER
);

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_TUTOR
FOREIGN KEY (ID_TUTOR)
REFERENCES TUTORES (ID_TUTOR);

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_ALUMNOT
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO);

DESCRIBE TUTORES;

INSERT INTO TUTORES VALUES
(1, 'JORGE', '2721976060','PUEBLA, PUE','A');
INSERT INTO TUTORES VALUES
(2, 'MARIA', '2721976060','VERACRUZ','A');
INSERT INTO TUTORES VALUES
(3, 'ALEJANDRO', '2721976060','MICHOACAN','A');
INSERT INTO TUTORES VALUES
(4, 'JOSE', '2721976060','HIDALGO','A');
INSERT INTO TUTORES VALUES
(5, 'ALBERTO', '2721976060','ZACATECAS','A');

INSERT INTO ALUMNOS_TUTORES VALUES (1,1,1);
INSERT INTO ALUMNOS_TUTORES VALUES (2,2,4);
INSERT INTO ALUMNOS_TUTORES VALUES (3,2,5);
INSERT INTO ALUMNOS_TUTORES VALUES (4,3,2);
INSERT INTO ALUMNOS_TUTORES VALUES (5,5,3);

INSERT INTO TUTORES VALUES
(6, 'ALBERTANO', '2721976060','ZACATECAS','D');

COMMIT;

-- CREAR UNA TABLA QUE SE LLAME PADRES
-- QUE TENGA SU PROPIO ID
-- NOMBRE, DIRECCION, TELEFONO, GENERO
-- CHECK GENERO 'MASCULINO' 'FEMENINO'

-- CREAR UNA TABLA RELACIONAL
--PADRES_ALUMNOS
-- ID_PA 
-- ID_ALUMNO
-- ID_PADRE
-- CREAR SUS RESPECTIVAS LLAVES FORANEAS
-- POR LO MENOS 5 REGISTROS POR CADA TABLA

-- SECUENCIAS
-- CREANDO SECUENCIAS
-- Se emplean para generar valores de números enteros
-- De preferencia son consecutivos (incremento de 1 en 1)
-- O pueden ser con un incremento que nosotros necesitemos
-- Se utiliza para generar las llaves primarias y así asegurarnos que los valores
-- No se repitan

-- CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES

CREATE SEQUENCE ALUMNO_SEQ -- CREAMOS LA SECUENCIA Y SU NOMBRE
START WITH 6 -- EL VALOR A PARTIR DEL CUAL INICIA LA SECUENCIA
INCREMENT BY 1 -- INCREMENTA EL VALOR COMO SE LE INDIQUE
MAXVALUE 999 -- INDICAMOS EL VALOR MÁXIMO HASTA EL QUE LLEGA LA SECUENCIA
MINVALUE 1 -- INDICAMOS EL VALOR MINIMO DE LA SECUENCIA
NOCYCLE; -- INDICAMOS SI LA SECUENCIA UNA VEZ FINALIZADA SE CICLE (CYCLE) O NO

--ELIMINAR LA SECUENCIA
DROP SEQUENCE ALUMNO_SEQ;

-- CREAR UNA SECUENCIA CON VALORES POR DEFECTO (PARA TABLAS DE NUEVA
-- CREACIÓN)
CREATE SEQUENCE TUTORES_SEQ;

-- TRIGGER O DISPARADOR - EJECUTAR UNA ACCIÓN O DESENCADENAR UN EVENTO

CREATE TRIGGER INSERT_IDALUMNO
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL;
END;
--HAY ERRORES QUE CORREGIR SE BORRARON SEQUENCES Y TRIGGERS
--COMENZAMOS DESPUES DE CORRECCIONES
-- INTENTANDO HACER UNA NUEVA INSERCIÓN EN LA TABLA ALUMNO
DESCRIBE ALUMNO;

INSERT INTO ALUMNO VALUES
(1,'ALEJANDRO','24/11/1985','MASCULINO','BARJ851124HVZ','8O SEMESTRE',1);

SELECT * FROM ALUMNO;
-- CREANDO EL TRIGGER PARA LA TABLA TUTORES
CREATE TRIGGER INSERT_IDTUTORES
BEFORE INSERT ON TUTORES FOR EACH ROW BEGIN
SELECT TUTORES_SEQ.NEXTVAL INTO:NEW.ID_TUTOR FROM DUAL;
END;
DESCRIBE TUTORES;

--EL SIGUIENTE COMANDO FALLO PORQUE EL ID YA EXISTE
INSERT INTO TUTORES VALUES
(1,'MARIELA','2222556677','PUEBLA','B');
SELECT * FROM TUTORES;

-- OTRA FORMA DE INSERCIÓN - INSERCIÓN MASIVA
INSERT ALL
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS) VALUES
('PEDRO','18/01/1997','MASCULINO','PEDR8906712','8O SEMESTRE',1)
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS) VALUES
('PABLO','18/01/1998','MASCULINO','PEDR8906712','8O SEMESTRE',1)
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS) VALUES
('HUGO','18/01/1999','MASCULINO','PEDR8906712','8O SEMESTRE',1)
SELECT * FROM ALUMNO;
--¿¿¿Porque tenemos que hacer un SELECT from DUAL???
--DUAL : It is a table that is automatically created by Oracle Database along with the data dictionary. 
--DUAL is in the schema of the user SYS but is accessible by the name DUAL to all users. 
--It has one column, DUMMY, defined to be VARCHAR2(1), and contains one row with a value X.
--POR EJEMPLO: SELECT (2+2)*8 FROM DUAL; regresa 32
----#####
-- EJERCICO 3 -- BARCOS-- CLUB NAUTICO
CREATE TABLE SOCIO(
ID_SOCIO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10)
);
SELECT * FROM SOCIO;

CREATE SEQUENCE SOCIO_SEQ;

CREATE TRIGGER INSERT_SOCIO
BEFORE INSERT ON SOCIO FOR EACH ROW BEGIN
SELECT SOCIO_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL;
END;

CREATE TABLE BARCO(
ID_BARCO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
NUM_AMARRE NUMBER,
CUOTA NUMBER(8,2)
);

CREATE SEQUENCE BARCO_SEQ;

CREATE TRIGGER INSERT_BARCO
BEFORE INSERT ON BARCO FOR EACH ROW BEGIN
SELECT BARCO_SEQ.NEXTVAL INTO:NEW.ID_BARCO FROM DUAL;
END;

CREATE TABLE PATRON(
ID_PATRON NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE PATRON_SEQ;

CREATE TRIGGER INSERT_PATRON
BEFORE INSERT ON PATRON FOR EACH ROW BEGIN
SELECT PATRON_SEQ.NEXTVAL INTO:NEW.ID_PATRON FROM DUAL;
END;

CREATE TABLE SOCIOS_BARCO(
ID_SB NUMBER PRIMARY KEY,
ID_SOCIO NUMBER,
ID_BARCO NUMBER,
CONSTRAINT FK_ID_SOCIO
FOREIGN KEY (ID_SOCIO)
REFERENCES SOCIO(ID_SOCIO),
CONSTRAINT FK_ID_BARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO)
);

CREATE SEQUENCE SOCIOSBARCO_SEQ;

CREATE TRIGGER INSERT_SOCIOSBARCO
BEFORE INSERT ON SOCIOS_BARCO FOR EACH ROW BEGIN
SELECT SOCIOSBARCO_SEQ.NEXTVAL INTO:NEW.ID_SB FROM DUAL;
END;

CREATE TABLE SALIDAS(
ID_SALIDA NUMBER PRIMARY KEY,
DESTINO NVARCHAR2(30),
FECHASALIDA DATE,
ID_BARCO NUMBER,
ID_PATRON NUMBER,
CONSTRAINT FK_IDBARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO),
CONSTRAINT FK_IDPATRON
FOREIGN KEY (ID_PATRON)
REFERENCES PATRON(ID_PATRON)
);

CREATE SEQUENCE SALIDASBARCO_SEQ;

CREATE TRIGGER INSERT_SALIDASBARCO
BEFORE INSERT ON SALIDAS FOR EACH ROW BEGIN
SELECT SALIDASBARCO_SEQ.NEXTVAL INTO:NEW.ID_SALIDA FROM DUAL;
END;

COMMIT;
-- INSERTAR DATOS EN NUESTRAS TABLAS

INSERT ALL
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ESMERALDA','ACAPULCO','7441234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('JOSE DAVID','CHIAPAS','9611234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('JONATHAN','CHIAPAS','9611234568')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ANTONIO','EDO MEX','5641234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALEX','EDO MEX','5541234567')
SELECT * FROM DUAL;

INSERT ALL
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN PABLO','MORELOS','7771234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('MARICELA','EDO MEX','557654321')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALFONSO','EDO MEX','567654321')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN OSMAR','VERACRUZ','2291234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('RAFAEL','QUERETARO','4421234567')
SELECT * FROM DUAL;

DESCRIBE BARCO;

INSERT ALL
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('LA NIÑA', 101, 1200.50)
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('LA PINTA', 102, 1800.50)
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('LA SANTA MARIA', 103, 2000.50)
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('PERLA NEGRA', 104, 5500.50)
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('EL HOLANDES', 105, 3200.50)
SELECT * FROM DUAL;

INSERT ALL 
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (1,5)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (2,4)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (3,1)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (4,2)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (5,1)
SELECT * FROM DUAL;

INSERT ALL 
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('VERACRUZ',TO_DATE('16/06/2023 08:00:00', 'DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('VILLAHERMOSA',TO_DATE('17/06/2023 08:30:00', 'DD-MM-YYYY HH24:MI:SS'),2,2)
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('CAMPECHE',TO_DATE('18/06/2023 09:00:00', 'DD-MM-YYYY HH24:MI:SS'),3,3)
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('YUCATAN',TO_DATE('19/06/2023 08:40:00', 'DD-MM-YYYY HH24:MI:SS'),4,4)
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('CANCUN',TO_DATE('20/06/2023 10:00:00', 'DD-MM-YYYY HH24:MI:SS'),5,5)
SELECT * FROM DUAL;

SELECT * FROM SALIDAS;

COMMIT;

-- CONSULTAR HORA Y FECHA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA, 'DD-MM-YYYY HH24:MI:SS') FROM SALIDAS;

-- CONSULTAR UNICAMENTE HORARIO DE SALIDA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA, 'HH24:MI:SS') FROM SALIDAS;

COMMIT;

-- LA SENTENCIA PARA BORRAR REGISTROS ES CON
-- DELETE FROM 
DELETE FROM SALIDAS WHERE ID_SALIDA=5;

SELECT * FROM SALIDAS;

-- EXISTE UN COMANDO QUE NOS PERMITE REGRESAR AL ESTADO DEL ULTIMO COMMIT
-- ESTO SE LOGRA EN CASO DE INSERCIÓN, BORRADO O ACTUALIZADO DE DATOS
ROLLBACK;

SELECT * FROM SALIDAS;

-- COSULTAS CON COLUMNAS ESPECIFICAS
SELECT ID_SALIDA, DESTINO FROM SALIDAS;

SELECT * FROM BARCO;
-- REALIZANDO UNA CONSULTA CON ALGUNA CONDICION
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA>3000;

-- REALIZAR UNA CONSULTA CON MÁS CONDICIONES
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA>3000 AND NOMBRE='PERLA NEGRA';

-- REALIZAMOS UNA CONSULTA PARA BUSCAR RANGOS
SELECT * FROM BARCO WHERE CUOTA BETWEEN 1000 AND 3000;
-- BORRADO DE REGISTROS CON NOMBRE
DELETE FROM ALUMNO WHERE NOMBRE='ALEJANDRO';

COMMIT;

-- BUSCAR VALORES SIMILARES
SELECT * FROM ALUMNO WHERE NOMBRE LIKE 'E%';
SELECT * FROM ALUMNO WHERE NOMBRE LIKE '%O';

-- CONSULTA CON FUNCIONES DE VALORES MÁXIMOS Y MINIMOS
SELECT MAX(CUOTA) FROM BARCO;
SELECT MIN(CUOTA) FROM BARCO;

-- BUSCAR O CONSULTAR EL BARCO CON MAYOR CUOTA (FUNCIONES DE AGREGACIÓN)
SELECT * FROM BARCO WHERE CUOTA = (SELECT MAX(CUOTA) FROM BARCO);
-- SELECT * FROM BARCO WHERE CUOTA=5500.5;

-- REALIZAR UN CONTEO DE FILAS PARA DETERMINADOS DATOS
SELECT COUNT(ID_BARCO) FROM BARCO WHERE CUOTA<3000;

-- OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (CUOTA) FROM BARCO;

--REALIZAR LA SUMATORIA DE VALORES
SELECT SUM(CUOTA) FROM BARCO;

-- FUNCIONES GROUP BY -- ENTREVISTA
-- REALIZAR UN CONTEO DE ALUMNOS Y AGRUPAR CUANTOS HAY POR GENERO
SELECT COUNT (ID_ALUMNO),GENERO FROM ALUMNO GROUP BY GENERO;

SELECT * FROM ALUMNO;

-- ORDERNAR LOS REGISTROS POR ALGUNA COLUMNA, EN ESTE CASO POR LA COLUMNA NOMBRE
-- Y PODEMOS ORDENARLOS DE MANERA ASCENDENTE O DESCENDENTE

SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;

SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;

-- MOSTRAR EL TOTAL DE REGISTROS DE UNA TABLA
SELECT COUNT(ID_CA) FROM CARRERAS_ALUMNOS WHERE ID_CARRERA=1;
--UP TO HERE #####
DESCRIBE SOCIO;
INSERT ALL
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ESMERALDA','ACAPULCO','7441234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('JOSE DAVID','CHIAPAS','9611234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('JONATHAN','CHIAPAS','9612345678')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ANTONIO','EDO MEX','5641234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN PABLO','EDO MEX','5523456789')
SELECT * FROM DUAL;

DESCRIBE PATRON;
INSERT ALL
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN PABLO','MORELOS','7771234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('MARICELA','EDO MEX','7771234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALFONSO','EDO MEX','7771234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN OSMAR','VERACRUZ','7771234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('RAFAEL','QUERETARO','7771234567')
SELECT * FROM DUAL;

DESCRIBE BARCO
INSERT ALL
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('EL HOLANDES',101,1200.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA PINTA',102,1800.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA SANTA MARIA',103,2000.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('PERLA NEGRA',104,5500.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA NIÑA',105,3200.50)
SELECT * FROM DUAL;
SELECT * FROM BARCO;

DESCRIBE SOCIOS_BARCO
INSERT ALL
INTO SOCIOS_BARCO (ID_SB,ID_SOCIOS,ID_MATRICULA) VALUES (1,1,5)
INTO SOCIOS_BARCO (ID_SB,ID_SOCIOS,ID_MATRICULA) VALUES (2,2,4)
INTO SOCIOS_BARCO (ID_SB,ID_SOCIOS,ID_MATRICULA) VALUES (3,3,1)
INTO SOCIOS_BARCO (ID_SB,ID_SOCIOS,ID_MATRICULA) VALUES (4,4,2)
INTO SOCIOS_BARCO (ID_SB,ID_SOCIOS,ID_MATRICULA) VALUES (5,5,1)
SELECT * FROM DUAL;
SELECT * FROM SALIDAS;

INSERT ALL
INTO SALIDAS (DESTINO, FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('VERACRUZ,TO_DATE('16/06/2023 08:00:00', 'DD-MM-YYYY HH24:MI:SS'),5,5);
SELECT * FROM DUAL;
COMMIT;
SELECT * FROM SALIDAS;
--CONSULTAR HORA Y FECHA
SELECT ID_SALIDA, 0DESTINO, TO_CHAR(FECHASALIDA, 'DD-MM-YYYY HH24:MI:SS') FROM SALIDAS;
--CONSULTAR UNICAMENTE HORARIO DE SALIDA (SIN FECHA)
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA, 'HH24:MI:SS') FROM SALIDAS;
COMMIT;
--ROLLBACK; SIRVE PARA REGRESAR AL ESTADO DEL ULTIMO COMMIT
--EJEMPLOS DE CONSULTAS CON FILTROSS
SELECT ID_BARCO, NOMBRE FROM BARCO WHEERE CUOTA>3000 AND NOMBRE='PERLA NEGRA';
SELECT * FROM BARCO WHERE CUOTA BETWEEN 1000 AND 3000;

SELECT * FROM ALUMNO WHERE NOMBRE LIKE 'E%';
SELECT * FROM ALUMNO WHERE NOMBRE LIKE '%O';

--CONSULTA CON FUNCIONES MAX Y MIN
SELECT MAX(CUOTA) FROM BARCO;
SELECT MIN(CUOTA) FROM BARCO;
--BUSCAR EL BARCO CON MAYOR CUOTA (FUNCIONES DE AGREGACION)
SELECT * FROM BARCO WHERE CUOTA = (SELECT MAX(CUOTA) FROM BARCO);
-- REALIZAR UN CONTEO DE FILAS PARA DETERMINADOS DATOS
SELECT COUNT(ID_BARCO) FROM BARCO WHERE CUOTA < 3000;
--OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (CUOTA) FROM BARCO;
--REALIZAR L;A SUMATORIA DE VALORES
SELECT SUM(CUOTA) FROM BARCO;

--FUNCIONES GROUP BY
--REALIZAR UN CONTEO DE ALUMNOS Y AGRUPAR POR GENERO
SELECT COUNT (ID_ALUMNO),GENERO FROM ALUMNO GROUP BY GENERO;

SELECT * FROM ALUMNO;

--ORDENAR LOS REGISTROS POR ALGUNA COLUMNA, EN ESTE CASO
-- LA COLUMNA NOMBRE ASC O DESC
SELECT * FROM ALUMNOS ORDER BY NOMBRE DESC;

--MOSTRAR EL TOTAL DE REGISTROS DE UNA TABLA
SELECT COUNT(ID_ALUMNO) FROM ALUMNO;

--PROBAR PARA CONTAR TODAS LAS TABLAS
SELECT table_schema, SUM(row_count) AS total_rows FROM ( SELECT table_schema, count_rows_of_table(table_schema, table_name) AS row_count FROM information_schema.
SELECT table_name,num_rows FROM all_tables WHERE owner = 'Schema';

--¿Cómo contar todos los registros de todas las tablas dentro de la base de datos?
--What does this sql statement return? SELECT table_name,num_rows FROM all_tables WHERE owner = 'RAFAQUEB'
--The SQL statement you provided selects:
--the table_name and num_rows columns from the all_tables system view, 
--where the owner column is equal to 'RAFAQUEB'. 
--This will return a result set containing the names of all tables owned by the user 'RAFAQUEB', 
--along with the number of rows in each table. 
--However, its important to note that the num_rows column may not always contain accurate information until you analyze (gather stats) the tables.
--ESTO SE PUEDE LOGRAR COMO SIGUE:

--Mientras empezamos les comparto que... Probe mi solución para ver los records de la base de datos y encontré lo siguiente:
BEGIN
  DBMS_STATS.GATHER_SCHEMA_STATS(
    ownname => 'RAFAQUEB'
  );
END;
/
SELECT table_name, num_rows FROM all_tables WHERE owner = 'RAFAQUEB';

--EJERCICIO DE CONSULTAS--
--Buscar los datos del patron que haya estado en la salida con el
--barco perteneciente al socio 1
--SIN UTILIZAR INNER JOIN
SELECT * FROM PATRON 
WHERE ID_PATRON IN (SELECT ID_PATRON FROM SALIDAS WHERE ID_BARCO IN (SELECT ID_BARCO FROM SOCIOS_BARCO WHERE ID_SOCIO= 1));
--MI SOLUCION UTILIZANDO INNER JOIN
SELECT * FROM SOCIO INNER JOIN SOCIOS_BARCO ON socio.id_socio = socios_barco.id_socio 
INNER JOIN BARCO ON socios_barco.id_barco = barco.id_barco
INNER JOIN SALIDAS ON barco.id_barco = salidas.id_barco
INNER JOIN PATRON ON salidas.id_patron = patron.id_patron
WHERE socio.id_socio=1;
--SOLUCION DEL PROFE
--consultas con inner jopin
--Se muestran los registros que coinciden de una tabla A y una tabla B
--La coincidencia se da gracias al dato que comparten en común, que en este
--caso son nuestras llaves primarias y las llaves foraneas

--Forma explicita - indicando la sentencia con INNER JOIN o JOIN

--Vamos a unir la tabla de ALUMNOS
--con la tabla de CARRERAS, pero recurrimos a la tabla relacional
SELECT * FROM ALUMNO;
SELECT * FROM CARRERAS;
--FALTA TEXTO

--un campom en común, que es el ID_ALUMNO (Llave primaria en la tabla Alumno,
--llave foranea en la tabla carreras_alumnos)

SELECT * FROM ALUMNO
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

SELECT * FROM ALUMNO
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO
INNER JOIN CARRERAS
ON CARRERAS_ALUMNOS.ID_CARRERA = CARRERAS.ID_CARRERA;

SELECT A.ID_ALUMNO, A.NOMBRE, C.NOMBRE FROM ALUMNO A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ID_ALUMNO = CA.ID_ALUMNO
INNER JOIN CARRERAS C
ON CA.ID_CARRERA = C.ID_CARRERA;
-- Revisando la consulta con left join
-- prioriza la informacion de la tabl;a A sobre la tabla B
SELECT * FROM ALUMNO
LEFT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;
-- Nota la diferencia con right join donde se invierte la prioridad
SELECT * FROM ALUMNO
RIGHT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;
--Resolviendo el ejercicio de la Nautica con JOINS
SELECT P.ID_PATRON as Jefe, P.NOMBRE as Nombre_Completo, P.DIRECCION, P.TELEFONO FROM PATRON P
INNER JOIN SALIDAS S
ON P.ID_PATRON = S.ID_PATRON
INNER JOIN SOCIOS_BARCO SB
ON SB.ID_BARCO = S.ID_BARCO
WHERE ID_SOCIO = 1;