--Con dos guiones medios podemos escribir un comentario
-- Ctrl + s para guardar los cambios en el Script

/* 
Comentarios de varias
lineas de codigo.

SQL - Lenguaje de consulta estructurado - ( Structured Query Language)

ES un lenguaje para actualizar, obtener y calcular información en bases de datos 
relacionales

Base de Datos - Conjunto de datos organizados entre si, son organizados en tablas

-- La estructura de las tablas queda casi siempre de la siguiente manera:

-- Toda tabla debe llevar llave primaria. Cada registro es identificado
-- por una llave primaria(primary key, ID)
-- puede llevar llave foranea
-- Tipos de datos (caracteres, numericos, tipo fecha, etc)

-- NUMBER - Datos numéricos

NVARCHAR2 - Permite entrada de datos de tipo character y alfanumericos.
           Tiene la particularidad de liberar espacio de memoria 
           
           -- Por ejemplo, podemos tener un dato declarado con 30 caracteres. Pero 
           -- se utilizan esos 30 caracteres, ese espacio es liberado.
           
--DATE - Utilizados para manejo de fecha y hora.


-- DDL - Data Definition Language - Creación de tablas y estructuras.
-- DML - Data Manipulation Language - Creación de registros y manipulación 
-- de los mismos

-- SENTENCIA PARA LA CREACIÓN DE TABLAS
-- VAMOS A CREAR UNA TABLA DE ALUMNOS

-- NOMBRE, APELLIDO, MATRICULA, EDAD
-- lA INFORMACION DEBE ESTAR CORRECTAMENTE DEFINIDA O AUTOMATIZADA.
-- FECHA DE NACIEMIENTO
-- SEXO O GENERO
-- GRADO DE ESTUDIOS
-- CURP 
-- STATUS (ACTIVO O INACTIVO)


--RECOMIENDO AMPLIAMENTE EL USO DE MAYUSCULAS

*/

CREATE TABLE ALUMNO(
ID_ALUMNO NUMBER PRIMARY KEY, 
NOMBRE NVARCHAR2 (30),
FECHANAC DATE,
GENERO NVARCHAR2 (10),
CURP NVARCHAR2 (18),
GRADO NVARCHAR2 ( 20),
STATUS NUMBER 
);

--PARA VER LA ESTRUCTURA DE MI TABLA MEDIANTE COMANDOS O SENTENCIAS UTILIZA
-- DESCRIBE NOMBRE DE LA TABLA

DESCRIBE ALUMNO;

-- CREAR TABLA CON CARRERAS O LICENCIATURAS PARA LOS ALUMNOS

CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
AREA NVARCHAR2 (30),
DURACION NUMBER,
NUM_MATERIAS NUMBER
);


DESCRIBE CARRERAS;

-- CREAR UNA SECUENCIA CON VALORES POR DEFECTO( PARA TABLAS DE NUEVA CREACION
CREATE SEQUENCE CARRERAS_SEQ;

-- TRIGGER O DISPARADOR - EJECUTAR UNA ACCIÓN O DESEMCADENAR UN EVENTO

CREATE TRIGGER INSERT_IDCARRERA
BEFORE INSERT ON CARRERAS FOR EACH ROW BEGIN
SELECT CARRERAS_SEQ.NEXTVAL INTO:NEW.ID_CARRERA FROM DUAL;
END;


--RENOMBRAR UNA COLUMNA EN UNA TABLA

ALTER TABLE CARRERAS RENAME COLUMN NUM_MATERIAS TO MATERIAS;

-- MODIFICAR EL TIPO DE DATO EN LA COLUMNA (FUNCIONA SIEMPRE Y CUANDO
-- NO SE TENGAN LOS DATOS EN ESA COLUMNA)

DESCRIBE CARRERAS;
ALTER TABLE CARRERAS MODIFY DURACION NVARCHAR2(20);

DESCRIBE CARRERAS;
--PARA RELACIONAR DATOS, POR EJEMPLO AQUI RELACIONAR A CADA ALUMNO
-- COMO LA CARRERA A LA CUAL PERTENECE
-- ES MÁS FÁCIL UNA TERCERA TABLA Y ESTABLECER ESA RELACIÓN

-- CREAR UNA TABLA LLAMADA CARRERAS_ALUMNOS

CREATE TABLE CARRERAS_ALUMNOS(
ID_CA NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_CARRERA NUMBER
);

--CREANDO RESTRICCIONES EN NUESTRAS TABLAS
-- AGREGANDO UNA RESTRICCION DE LLAVE FORANEA
ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERAS
FOREIGN KEY (ID_CARRERA) -- EN QUE COLUMNA VAMOS A RECIBIR LA LLAVE O DATO
REFERENCES CARRERAS (ID_CARRERA); -- DE DONDE VIENE (TABLA Y QUE COLUMNA)
DESCRIBE CARRERAS;

-- PODEMOS ESTABLECER UNA RESTRICCION RESPECTO A LO QUE QUEREMOS 
-- ESCRIBIR EN UNA DETERMINADA COLUMNA
-- POR EJEMPLO EN LA TABLA ALUMNO UNICAMENTE ESCRIBIR EN LA 
--COLUMNA DE GENERO QUE SEA SOLO 'MASCULINO' O 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_GENERO
CHECK (GENERO IN('MASCULINO', 'FEMENINO'));


-- SENTENCIA PARA ELIMINAR UNA RESTICCION
ALTER TABLE ALUMNO DROP CONSTRAINT CHECK_GENERO;

-- CREAR RESTRICCION PARA NOMBRES UNICOS O REGISTROS UNICOS 
-- POR EJEMPLO, EN LA TABLA CARRERAS, TENEMOS NOMBRES DE LICENCIATURAS
-- Y NO PUEDEN SER LOS MISMOS O REPETIRCE

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA;

-- INSERCION DE DATOS 

-- INSERTAR DATOS EN LA TABLA ALUMNO
DESCRIBE ALUMNO;

-- CONSULTAR EL FORMATO DE FECHA DE MI SISTEMA
SELECT SYSDATE FROM DUAL;

INSERT INTO ALUMNO VALUES
(1,'ANTONIO','05/09/1990','MASCULINO','ANTO1584FGRT8756FR','OCTAVO',1);

INSERT INTO ALUMNO VALUES
(2,'JOSE','15/09/1990','MASCULINO','ANTO1584FGRT8756FR','OCTAVO',1);

INSERT INTO ALUMNO VALUES
(3,'EDUARDO','13/01/1997','MASCULINO','ANTO1584FGRT8756FR','OCTAVO',1);

INSERT INTO ALUMNO VALUES
(4,'BENIGNO','30/10/1986','MASCULINO','ANTO1584FGRT8756FR','OCTAVO',1);

INSERT INTO ALUMNO VALUES
(5,'ESMERALDA','05/09/1990','FEMENINO','ANTO1584FGRT8756FR','OCTAVO',1);

--- REALIZAR UNA CONSULTA GENERAL DE LOS DATOS DE UNA TABLA

SELECT * FROM ALUMNO;

-- ACTUALIZAR UN DATO EN UN REGISTRO DETERMINADO

UPDATE ALUMNO SET FECHANAC='14/02/1982' WHERE ID_ALUMNO=2;

UPDATE ALUMNO SET GENERO='MASCULINO' WHERE ID_ALUMNO=1;

-- REALIZAR UNA CONSULTA DE COLUMNA ESPECIFICA
SELECT NOMBRE FROM ALUMNO;
SELECT ID_ALUMNO,NOMBRE FROM ALUMNO;

-- CONSULTANDO UN REGISTRO DETERMINADO

SELECT * FROM ALUMNO WHERE NOMBRE='ESMERALDA';

-- COMO BORRAR UN REGISTRO ESPECIFICO DE UNA TABLA
DELETE FROM ALUMNO WHERE ID_ALUMNO=5;

SELECT * FROM ALUMNO

--PARA CONFIRMAR CAMBIOS EN LOS REGISTROS INSERTADOS
COMMIT;

-- INSERTAR REGISTROS EN NUESTRA TABLA DE CARRERAS
DESCRIBE CARRERAS;

INSERT INTO CARRERAS VALUES 
(1,'INGENIERIA EN INFORMÁTICA','EXACTAS','8 SEMESTRES',80);
INSERT INTO CARRERAS VALUES 
(2,'INGENIERIA EN SISTEMAS','EXACTAS','8 SEMESTRES',90);
INSERT INTO CARRERAS VALUES 
(3,'MEDICINA','BIOLOGICAS','8 SEMESTRES',55);
INSERT INTO CARRERAS VALUES 
(4,'DERECHO','HUMANIDADES','8 SEMESTRES',50);
INSERT INTO CARRERAS VALUES 
(5,'MERCADOTECNIA','ECONOMIA','8 SEMESTRES',60);

INSERT INTO CARRERAS VALUES 
(6,'INGLES','IDIOMAS','8 SEMESTRES',60, 25000);
SELECT * FROM CARRERAS;

-- YA QUE TENEMOS INFORMACION EN NUESTRAS DOS PRIMERAS TABLAS 
-- QUE SON ENTIDADES FUERTES
--PODEMOS AHORA SI LLENAR O RELACIONAR LOS DATOS EN LA TABLA DE 
--CARRERAS_ALUMNOS

--INSERTANDO DATOS EN LA TABLA CARRERAS_ALUMNOS
DESCRIBE CARRERAS_ALUMNOS;
INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,4);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,3,3);
INSERT INTO CARRERAS_ALUMNOS VALUES (4,4,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (5,5,5);

SELECT * FROM CARRERAS_ALUMNOS;

COMMIT;

-- AGREGAR UNA COLUMNA A UNA TABLA

DESCRIBE CARRERAS;
-- DOS DE LOS OCHO SON DECIMALES
ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER(8,2);


SELECT * FROM CARRERAS;

UPDATE CARRERAS SET PRESUPUESTO=200000.99 WHERE ID_CARRERA=2;

--ELIMINAR UNA COLUMNA 
ALTER TABLE CARRERAS DROP COLUMN PRESUPUESTO;

-- BORRAR UN REGISTRO (FILA)
DELETE FROM CARRERAS WHERE ID_CARRERA=5;


SELECT * FROM CARRERAS;

-- EJERCICIO 1

-- CREAR UNA TABLA QUE SE LLAME TUTORES
-- LA TABLA DEBE LLEVAR LAS SIGUIENTES COLUMNAS
-- ID DEL TUTOR (ID-TUTOR)
-- NOMBRE
-- TELEFONO
-- DIRECCION
-- CLAVE DEL TUTOR ( RESTRICCION DE LA CLAVE SOLO PUEDA SER A, B, C, D

-- CREA UNA TABLA RELACIONAL QUE SE LLAME
-- ALUMNOS _TUTORES
-- LLEVARIA TRES COLUMNAS
-- ID DE LA TABLA
-- ID DEL ALUMNO ID DEL TUTOR 
-- CREAN SUS RESPECTIVAS LLEVES FORANEAS
-- CADA TABLA CON MINIMO 5 REGISTROS

-- CREAR TABLA DE TUTORES

CREATE TABLE TOTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
TELEFONO NUMBER (10),
DIRECCION NVARCHAR2 (30),
CLAVE NUMBER (18)
);

-- MODIFICAR EL DATO CLAVE DE NUMBER A NVARCHAR2
ALTER TABLE TUTORES MODIFY CLAVE NVARCHAR2(1);

-- RESTRICCION DE LA TABLA TUTORES
ALTER TABLE TUTORES ADD CONSTRAINT CHECK_CLAVE
CHECK (CLAVE IN('A', 'B', 'C', 'D' ));

-- CREACIÓN DE LA TABLA ALUMNOS_TUTORES
CREATE TABLE ALUMNOS_TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTORES NUMBER
);

-- CREACIÓN DE LAS LLAVES FORANEAS
ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_TUTOR
FOREIGN KEY (ID_TUTOR) 
REFERENCES TUTORES (ID_TUTOR); 

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_ALUMNOS
FOREIGN KEY (ID_ALUMNO) 
REFERENCES ALUMNO (ID_ALUMNO);

DESCRIBE ALUMNOS_TUTORES;

-- INSERTAMOS DATOS EN LA TABLA TUTOR 
INSERT INTO TUTORES VALUES 
(1,'JOSE FRANCISCO',5524596325,'ENRRIQUE SEGOBIANO','A');

INSERT INTO TUTORES VALUES 
(2,'MARIA',5524596325,'ENRRIQUE SEGOBIANO 25','B');

INSERT INTO TUTORES VALUES 
(3,'PANCHITA',5524596325,'ENRRIQUE SEGOBIANO 32','C');

INSERT INTO TUTORES VALUES 
(4,'PANCRACIO',5524596325,'ENRRIQUE SEGOBIANO 28','D');

INSERT INTO TUTORES VALUES 
(5,'FULANITO',5524596325,'ENRRIQUE SEGOBIANO 54','A');

-- INSERTAMOS VALORES A LA TABLA ALUMNOS_TUTORES

INSERT INTO ALUMNOS_TUTORES VALUES (1,1,1);
INSERT INTO ALUMNOS_TUTORES VALUES (2,2,4);
INSERT INTO ALUMNOS_TUTORES VALUES (3,3,3);
INSERT INTO ALUMNOS_TUTORES VALUES (4,4,2);
INSERT INTO ALUMNOS_TUTORES VALUES (5,5,5);

-- MOSTRAMOS LOS DATOS DE LA TABLA ALUMNOS_TUTORES

SELECT * FROM ALUMNOS_TUTORES

COMMIT;

--CREAR UNA TABLA QUE SE LLAME PADRES
-- QUE TENGA SU PROPIO ID
-- NOMBRE, DIRECCION, TELEFONO, GENERO

-- CREAR UNA TABLA RELACIONAL 
-- PADRES_ALUMNOS
-- ID_PA
-- ID_ALUMNO
-- ID_PADRE

-- CREAR SUS RESPECTIVAS LLAVES FORANEAS 
-- POR LO MENOS 5 REGISTROS POR CADA TABLA.

-- CREAR TABLA PADRES
CREATE TABLE PADRES(
ID_PADRES NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2 (10),
GENERO NVARCHAR2 (10)
);

-- CONDICIONAR EL GENERO

ALTER TABLE PADRES ADD CONSTRAINT CHK_GENERO
CHECK (GENERO IN ('MASCULINO', 'FEMENINO'));

-- CREAR TABLA RELACIONAL PADRES_ALUMNOS

CREATE TABLE PADRES_ALUMNOS(
ID_PA NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_PADRE NUMBER
);


-- CREAR SUS RESPECTIVAS LLAVES FORANEAS 

ALTER TABLE PADRES_ALUMNOS ADD CONSTRAINT FK_ID_PADRES
FOREIGN KEY (ID_PADRE)
REFERENCES PADRES (ID_PADRES);


ALTER TABLE PADRES_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO5
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO);


-- INSERTAR DATOS EN SU RESPECTIVA TABLA

INSERT INTO PADRES VALUES
(1,'PERENGANO','MEXICANO', '1052856892','MASCULINO' );

INSERT INTO PADRES VALUES
(2,'MERENGANO','RUSO', '1052856892','MASCULINO' );

INSERT INTO PADRES VALUES
(3,'FULANO','JAPON', '1052856892','MASCULINO' );

INSERT INTO PADRES VALUES
(4,'PANCRACIA','IRAN', '1052856892','FEMENINO' );

INSERT INTO PADRES VALUES
(5,'SULTANO','SAUDI', '1052856892','MASCULINO' );

SELECT * FROM PADRES;

INSERT INTO PADRES_ALUMNOS VALUES (1,1,1);
INSERT INTO PADRES_ALUMNOS VALUES (2,2,5);
INSERT INTO PADRES_ALUMNOS VALUES (3,3,4);
INSERT INTO PADRES_ALUMNOS VALUES (4,4,2);
INSERT INTO PADRES_ALUMNOS VALUES (5,5,3);

SELECT * FROM PADRES_ALUMNOS;

---SECUENCIAS
--CREANDO SECUENCIAS
-- SE EMPLEA PARA GENERAR VALORES DE NUMEROS ENTEROS, DE PREFERENCIA 
-- SON CONSECUTIVOS DE 1 EN 1
-- O PUEDE INCREMENTAR QUE NOSOSTROS NESCECITEMOS
-- SE UTILIZA PARA GENERAR LAS LLAVES PRIMARIAS Y ASI ASEGURARNOS QUE LOS 
-- VALORES NO SE REPITAN

-- CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES

CREATE SEQUENCE ALUMNO_SEQ -- CREAMOS LA SECUENCIA Y SU NOMBRE
START WITH 6 -- EL VALOR EL CUAL INICIA LA SECUENCIA
INCREMENT BY 1 -- INCREMENTA EL VALOR COMO SE INDIQUE
MAXVALUE 999 -- INDICAMOS EL VALOR MAXIMO DE LA SECUENCIA
MINVALUE 1 -- INDICAMOS EL VALOR MINIMO DE LA SECUENCIA
NOCYCLE; -- INDICAMOS SI LA SECUENCIA UNA VEZ FINALIZADA SE CICLE(CYCLE) O NO

DROP SEQUENCE ALUMNO_SEQ; -- PARA BORRAR LA SECUENCIA

-- CREAR UNA SECUENCIA CON VALORES POR DEFECTO( PARA TABLAS DE NUEVA CREACION
CREATE SEQUENCE TUTORES_SEQ;

-- TRIGGER O DISPARADOR - EJECUTAR UNA ACCIÓN O DESEMCADENAR UN EVENTO

CREATE TRIGGER INSERT_IDALUMNO
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL;
END;

-- INTENTANDO HACER UNA NUEVA INSERCION EN LA TABLA ALUMNO
DESCRIBE ALUMNO;

INSERT INTO ALUMNO VALUES
(1,'PANCHITO', '24/11/1985', 'MASCULINO', 'DRBDB615R65BDR55FR', '8º SEMESTRE', 1);

SELECT* FROM ALUMNO;

-- CREANDO UN TRIGGER PARA LA TABLA TUTORES

CREATE TRIGGER INSERT_IDTUTORES
BEFORE INSERT ON TUTORES FOR EACH ROW BEGIN
SELECT TUTORES_SEQ.NEXTVAL INTO:NEW.ID_TUTOR FROM DUAL;
END;

DESCRIBE TUTORES;

INSERT INTO TUTORES VALUES
(1, 'MARIELA', '315513513', 'PUEBLA','B');

-- OTRA FORMA DE INSERCIÓN - INSERCIÓN MASIVA
INSERT ALL

INTO ALUMNO (NOMBRE,FECHANAC, GENERO, CURP, GRADO ,STATUS) VALUES
('PEDRO','18/01/1997','MASCULINO','PEDVD656FSE4', '8º SEMESTRE',1)

INTO ALUMNO (NOMBRE,FECHANAC, GENERO, CURP, GRADO ,STATUS) VALUES
('PABLO','18/01/1997','MASCULINO','PEDVD656FSE4', '8º SEMESTRE',1)

INTO ALUMNO (NOMBRE,FECHANAC, GENERO, CURP, GRADO ,STATUS) VALUES
('HUGO','18/01/1997','MASCULINO','PEDVD656FSE4', '8º SEMESTRE',1)

SELECT * FROM DUAL;

SELECT * FROM ALUMNO;

-- EJERCICIO 1 CREAR BASE DE DATOS REALCIONAL DE UN GABINETE DE ABOGADOS


-- CREAR TABLA CLIENTE
CREATE TABLE CLIENTE(
ID_CLIENTE NUMBER PRIMARY KEY,
DNI NUMBER,
NOMBRE NVARCHAR2 (30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2 (10)
);

-- CREAR TABLA PROCURADOR
CREATE TABLE PROCURADOR(
ID_PROCURADOR NUMBER PRIMARY KEY,
DNI NUMBER,
NOMBRE NVARCHAR2 (30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2 (10)
);

-- CREAR TABLA ASUNTO
CREATE TABLE ASUNTO(
ID_ASUNTO NUMBER PRIMARY KEY,
ID_CLIENTE NUMBER,
FECHA_IN DATE,
FECHA_FIN DATE,
ESTADO NVARCHAR2 (10)
);
-- ELIMINAR ID_PROCURADOR DE LA TABLA ASUNTO
ALTER TABLE ASUNTO DROP COLUMN ID_PROCURADOR;
SELECT * FROM ASUNTO;

-- CREAR TABLA ASUNTO_PROCURADOR
CREATE TABLE ASUNTO_PROCURADOR(
ID_AP NUMBER PRIMARY KEY,
ID_ASUNTO NUMBER,
ID_PROCURADOR NUMBER
);
CREATE SEQUENCE ASUNTOPROCURADOR_SEQ;

CREATE TRIGGER INSERT_AD_ASUNTOPROCURADOR
BEFORE INSERT ON ASUNTO_PROCURADOR FOR EACH ROW BEGIN
SELECT ASUNTOPROCURADOR_SEQ.NEXTVAL INTO:NEW.ID_AP FROM DUAL;
END;

-- CAMBIAR ID_PROCURADOR NUMBER POR NUMBER (0,0)
ALTER TABLE ASUNTO MODIFY ID_PROCURADOR NUMBER(0,0);

-- CONDICIONAR EL ESTADO
ALTER TABLE ASUNTO ADD CONSTRAINT CHK_ESTADO
CHECK (ESTADO IN ('TRAMITE','ACHIVADO'));

-- CREAR LLAVE FORANEA DE CLIENTE
ALTER TABLE ASUNTO ADD CONSTRAINT FK_ID_CLIENTE
FOREIGN KEY (ID_CLIENTE)
REFERENCES CLIENTE(ID_CLIENTE);

-- CREAR LLAVE FORANEA DE PROCURADOR
ALTER TABLE ASUNTO_PROCURADOR ADD CONSTRAINT FK_ID_PROCURADOR
FOREIGN KEY (ID_PROCURADOR)
REFERENCES PROCURADOR(ID_PROCURADOR);

--ELIMINAR LLAVE FORANEA
ALTER TABLE ASUNTO DROP CONSTRAINT FK_ID_PROCURADOR;

-- CREAR SECUANCIA CLIENTE
CREATE SEQUENCE CLIENTE_SEQ
START WITH 1
INCREMENT BY 1
MAXVALUE 999
MINVALUE 1
NOCYCLE;

-- CREAR TRIGGER CLIENTE
CREATE TRIGGER INSERT_AD_CLIENTE
BEFORE INSERT ON CLIENTE FOR EACH ROW BEGIN
SELECT CLIENTE_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

-- CREAR SECUENCIA PROCURADOR
CREATE SEQUENCE PROCURADOR_SEQ
START WITH 1
INCREMENT BY 1
MAXVALUE 999
MINVALUE 1
NOCYCLE;

-- CREAR TRIGGER PROCURADOR
CREATE TRIGGER INSERT_ID_PROCURADOR
BEFORE INSERT ON PROCURADOR FOR EACH ROW BEGIN
SELECT PROCURADOR_SEQ.NEXTVAL INTO:NEW.ID_PROCURADOR FROM DUAL;
END;

-- CREAR SECUENCIA ASUNTO
CREATE SEQUENCE ASUNTO_SEQ
START WITH 1
INCREMENT BY 1
MAXVALUE 999
MINVALUE 1
NOCYCLE;

-- CREAR TRIGGER ASUNTO
CREATE TRIGGER INSERT_ID_ASUNTO
BEFORE INSERT ON ASUNTO FOR EACH ROW BEGIN
SELECT ASUNTO_SEQ.NEXTVAL INTO:NEW.ID_ASUNTO FROM DUAL;
END;

-- INSERTAR DATOS AL CLIENTE
INSERT ALL
INTO CLIENTE (DNI,NOMBRE,DIRECCION,TELEFONO) VALUES
(1589,'FULANITO','NEW YORK', '5698231423')

INTO CLIENTE (DNI,NOMBRE,DIRECCION,TELEFONO) VALUES
(1589,'PERENGANITO','TOKIO', '6456644565')

INTO CLIENTE (DNI,NOMBRE,DIRECCION,TELEFONO) VALUES
(1589,'SULTANITO','AMSTERDAM', '5689784512')
SELECT * FROM DUAL;

DELETE FROM CLIENTE;

SELECT * FROM CLIENTE;

-- INSERTAR DATOS AL PROCURADOR
INSERT ALL
INTO PROCURADOR (DNI,NOMBRE,DIRECCION, TELEFONO) VALUES
(6598,'PANCRACIA', 'NEZA', '6598573265')

INTO PROCURADOR (DNI,NOMBRE,DIRECCION, TELEFONO) VALUES
(6598,'CHONA', 'NEZA', '6598573265')

INTO PROCURADOR (DNI,NOMBRE,DIRECCION, TELEFONO) VALUES
(6598,'SERGIO EL BAILADOR', 'NEZA', '6598573265')
SELECT * FROM DUAL;

DELETE FROM PROCURADOR;

SELECT * FROM PROCURADOR;


-- INSERTAR DATOS AL ASUNTO
INSERT ALL
INTO ASUNTO (ID_CLIENTE, FECHA_IN, FECHA_FIN, ESTADO) VALUES
(4, '18/01/1997', '31/12/2023', 'TRAMITE')

INTO ASUNTO (ID_CLIENTE, FECHA_IN, FECHA_FIN, ESTADO) VALUES
(5, '25/03/2000', '27/01/2024', 'ACHIVADO')

INTO ASUNTO (ID_CLIENTE, FECHA_IN, FECHA_FIN, ESTADO) VALUES
(6, '06/05/2023', '01/08/2025', 'TRAMITE')
SELECT * FROM DUAL;

DELETE FROM ASUNTO;

SELECT * FROM CLIENTE;

-- INSERTAR DATOS A ASUNTO_PROCURADOR

INSERT ALL
INTO ASUNTO_PROCURADOR (ID_AP, ID_ASUNTO, ID_PROCURADOR)VALUES
(1, 2,4)
INTO ASUNTO_PROCURADOR (ID_AP, ID_ASUNTO, ID_PROCURADOR)VALUES
(2, 2,5)
INTO ASUNTO_PROCURADOR (ID_AP, ID_ASUNTO, ID_PROCURADOR)VALUES
(3, 2,6)
SELECT * FROM DUAL;

INSERT INTO ASUNTO_PROCURADOR VALUES(4,3,4);

DELETE FROM ASUNTO_PROCURADOR;

-- VER RESULTADOS
SELECT * FROM ASUNTO;
SELECT * FROM ASUNTO_PROCURADOR;

-- EJERCICIO 3  - BARCOS

CREATE TABLE SOCIO(
ID_SOCIO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2 (10)
);

CREATE SEQUENCE SOCIO_SEQ;
-- CREATE OR REPLACE TRIGGER INSERT_SOCIO
CREATE TRIGGER INSERT_SOCIO
BEFORE INSERT ON SOCIO FOR EACH ROW BEGIN
SELECT SOCIO_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL;
END;

CREATE TABLE BARCO(
ID_BARCO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
NUM_AMARRE NUMBER,
CUOTA NUMBER (8,2)
);
-- ELIMINA LA SECUENCIA BARCO_SEQ
-- DROP SECUENCE BARCO_SEQ;
CREATE SEQUENCE BARCO_SEQ;
-- CREAR O REEMPLAZAR EL TRIGGER INSERT_BARCO
-- CREATE OR REPLACE TRIGGER INSERT_BARCO

-- VERIFICA LOS ERRORES EN EL TRIGGER
SHOW ERRORS TRIGGER TRIGGER_INSERT_BARCO;

-- SE CREA EL TRIGGER
CREATE TRIGGER INSERT_BARCO 
BEFORE INSERT ON BARCO FOR EACH ROW BEGIN
SELECT BARCO_SEQ.NEXTVAL INTO:NEW.ID_BARCO FROM DUAL;
END;
-- ELIMINAR EL TRIGGER INSERT_BARCO
DROP TRIGGER INSERT_BARCO;

CREATE TABLE PATRON(
ID_PATRON NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2 (10)
);

CREATE SEQUENCE PATRON_SEQ;

CREATE TRIGGER INSERT_PATRON
BEFORE INSERT ON PATRON FOR EACH ROW BEGIN
SELECT PATRON_SEQ.NEXTVAL INTO:NEW.ID_PATRON FROM DUAL;
END;

CREATE TABLE SOCIOS_BARCO(
ID_SB NUMBER PRIMARY KEY,
ID_SOCIO NUMBER,
ID_BARCO NUMBER,
CONSTRAINT FK_ID_SOCIO
FOREIGN KEY (ID_SOCIO)
REFERENCES SOCIO(ID_SOCIO),
CONSTRAINT FK_ID_BARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO)
);

CREATE SEQUENCE SOCIOSBARCO_SEQ;

CREATE TRIGGER INSERT_SOCIOSPATRON
BEFORE INSERT ON SOCIOS_BARCO FOR EACH ROW BEGIN
SELECT SOCIOSBARCO_SEQ.NEXTVAL INTO:NEW.ID_SB FROM DUAL;
END;

CREATE TABLE SALIDAS(
ID_SALIDA NUMBER PRIMARY KEY,
DESTINO NVARCHAR2 (30),
FECHASALIDA DATE,
ID_BARCO NUMBER,
ID_PATRON NUMBER,
CONSTRAINT FK_IDBARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO),
CONSTRAINT FK_IDPATRON
FOREIGN KEY (ID_PATRON)
REFERENCES PATRON(ID_PATRON)
);

CREATE SEQUENCE SALIDASBARCO_SEQ;

CREATE TRIGGER INSERT_SALIDASBARCO
BEFORE INSERT ON SALIDAS FOR EACH ROW BEGIN
SELECT SALIDASBARCO_SEQ.NEXTVAL INTO:NEW.ID_SALIDA FROM DUAL;
END;



COMMIT;

--INSERTAR DATOS EN NUESTRAS TABLAS

INSERT ALL
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES 
('ESMERALDA', 'ACAPULCO','7441465264')

INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES 
('JOSÉ DAVID', 'CHIAPAS','9641465264')

INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES 
('JONATHAN', 'CHIAPAS','9641465264')

INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES 
('ANTONIO', 'EDO MEX','5641465264')

INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES 
('ALEX', 'EDO MEX','5541465264')
SELECT * FROM DUAL;


INSERT ALL
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES 
('JUAN PABLO', 'MORELOS','7771465264')

INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES 
('MARICELA', 'EDO MEX','5541465264')

INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES 
('ALFONSO', 'EDO MEX','5641465264')

INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES 
('JUAN OSMAR', 'VERACRUZ','2241465264')

INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES 
('RAFAEL', 'QUERETARO','4441465264')
SELECT * FROM DUAL;

INSERT ALL
INTO BARCO (NOMBRE, NUM_AMARRE,CUOTA) VALUES
('LA NIÑA', 101, 1200.50)

INTO BARCO (NOMBRE, NUM_AMARRE,CUOTA) VALUES
('LA PINTA', 102, 1800.50)

INTO BARCO (NOMBRE, NUM_AMARRE,CUOTA) VALUES
('LA SANTA MARIA', 103, 2000.50)

INTO BARCO (NOMBRE, NUM_AMARRE,CUOTA) VALUES
('PERLA NEGRA', 104, 5500.50)

INTO BARCO (NOMBRE, NUM_AMARRE,CUOTA) VALUES
('EL HOLANDES', 105, 3200.50)
SELECT * FROM DUAL;

INSERT ALL 
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (1,5)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (2,4)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (3,3)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (4,2)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (5,1)
SELECT * FROM DUAL;


INSERT ALL 
INTO SALIDAS (DESTINO, FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('VERACRUZ', TO_DATE('16/06/2023 08:00:00', 'DD-MM-YYYY HH24:MI:SS'),1,1)

INTO SALIDAS (DESTINO, FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('VILLAHERMOSA', TO_DATE('17/06/2023 10:30:00', 'DD-MM-YYYY HH24:MI:SS'),2,2)

INTO SALIDAS (DESTINO, FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('CAMPECHE', TO_DATE('18/06/2023 16:15:00', 'DD-MM-YYYY HH24:MI:SS'),3,3)

INTO SALIDAS (DESTINO, FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('YUCATAN', TO_DATE('19/06/2023 18:05:00', 'DD-MM-YYYY HH24:MI:SS'),4,4)

INTO SALIDAS (DESTINO, FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('CANCUN', TO_DATE('20/06/2023 23:23:00', 'DD-MM-YYYY HH24:MI:SS'),5,5)
SELECT * FROM DUAL;

DELETE FROM SALIDAS;

SELECT *FROM SALIDAS;

COMMIT;

--CONSULTAR HORA Y FECHA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA, 'DD-MM-YYYY HH24:MI:SS') FROM SALIDAS;

-- CONSULTAR UNICAMENTE HORARIO DE SALIDA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA, 'HH24:MI:SS') FROM SALIDAS;


COMMIT;


-- LA SENTENCIA PARA BORRAR REGISTROS ES CON
-- DELETE FROM 
DELETE FROM SALIDAS WHERE ID_SALIDA=10;

SELECT * FROM SALIDAS;

-- EXISTE UN COMANDO QUE NOS PERMITE REGRESAR EL ESTADO DE EL ULTIMO COMMIT 
-- ESTO SE LOGRA EN CASO DE INSERCIÓN, BORRADO O ACTUALIZADO DE DATOS
-- SOLO FUNCIONA CON LOS REGISTROS, NO CON TABLAS COMPLETAS
ROLLBACK;

-- CONSULTA CON COLUMNAS ESPECIFICAS
SELECT ID_SALIDA, DESTINO FROM SALIDAS;

SELECT * FROM BARCO;

-- REALIZANDO UNA CONSULTA CON ALGUNA CONDICION
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA >3000;

-- REALIZAR UNA CONSULTA CON MÁS CONDICIONES
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA >3000 AND NOMBRE='PERLA NEGRA';

-- REALIZAMOS UNA CONSULTA PARA BUSCAR RANGOS
SELECT * FROM BARCO WHERE CUOTA BETWEEN 1000 AND 3000;

SELECT * FROM ALUMNO;

DELETE FROM ALUMNO WHERE NOMBRE='ALEJANDRO';

DELETE FROM ALUMNO WHERE ID_ALUMNO BETWEEN 7 AND 10;

COMMIT;

-- BUSCAR VALORES SIMILARES
SELECT * FROM ALUMNO WHERE NOMBRE LIKE 'E%';

SELECT * FROM ALUMNO WHERE NOMBRE LIKE '%O';

-- CONSULTA CON FUNCIONES DE VALORES MÁXIMOS Y MINIMOS

SELECT MAX (CUOTA) FROM BARCO;
SELECT MIN (CUOTA) FROM BARCO;

-- BUSCAR O CONSULTAR EL BARCO CON MAYOR CUOTA (FUNCIONES DE AGREGACIÓN)
SELECT * FROM BARCO WHERE CUOTA = (SELECT MAX (CUOTA) FROM BARCO);
-- SELECT * FROM BARCO WHERE CUOTA=5500.5; 

-- REALIZAR UN CONTEO DE FILAS PARA DETERMINADOS DATOS
SELECT COUNT (ID_BARCO) FROM BARCO WHERE CUOTA<3000;

-- OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (CUOTA) FROM BARCO;

-- REALIZAR LA SUMATORIA DE VALORES 
SELECT SUM(CUOTA) FROM BARCO;

-- FUNCIONES GROUP BY 
-- REALIZAR UN CONTEO DE ALUMNOS Y AGRUPAR CUANTOS HAY POR GENERO
SELECT COUNT  (ID_ALUMNO), GENERO FROM ALUMNO GROUP BY GENERO;

SELECT * FROM ALUMNO;

-- ORDENAR LOS REGISTROS POR ALGUNA COLUMNA, EN ESTE CASO POR LA COLUMNA NOMBRE
-- Y PODER ORDENARLOS DE MANERA ASCENDENTE O DESCENDENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;

SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;

-- MOSTRAR EL TOTAL DE REGISTROS DE UNA TABLA
SELECT COUNT(ID_ALUMNO) FROM ALUMNO;

-- INTENTA LA SUMA DE TODOS LOS ELEMENTOS DE UNA TABLA
SELECT COUNT (ID_CA) FROM CARRERAS_ALUMNOS WHERE ID_CARRERA=1;
SELECT table_name,num_rows FROM all_tables WHERE owner = 'Schema';
SELECT COUNT (ID_ALUMNO) AS ALUMNO, COUNT(ID_BARCO) AS BARCOS FROM ALUMNO, BARCO;

-- CONTAR TODOS LOS ELEMENTOS DE UNA TABLA
SELECT COUNT(*) FROM ALUMNO;
-- CONTAR TODOS LOS ELEMENTOS DE TODAS LAS TABLAS DE UNA BD
SELECT COUNT(*) FROM ALUMNO;

SELECT * FROM ALUMNO;


-- EJERCICIO DE CONSULTA DE DATOS --
-- BUSCAR LOS DATOS DEL PATRON QUE HAY ESTADO EN LA SALIDA CON EL BARCO 
-- PERTENECIENTE AL SOCIO 1

SELECT * FROM PATRON,BARCO,SOCIO WHERE ID_PATRON=4;

SELECT * FROM PATRON,BARCO,SOCIO WHERE ID_SOCIO=1; 

SELECT 
    (SELECT NOMBRE FROM PATRON WHERE ID_PATRON = SALIDAS.ID_PATRON) AS NOMBRE,
    ID_BARCO
FROM SALIDAS
WHERE ID_BARCO = 5;


SELECT 
    (SELECT ID_BARCO FROM BARCO WHERE ID_BARCO = SOCIOS_BARCO.ID_BARCO) AS ID_BARCO
FROM SOCIOS_BARCO
WHERE ID_SOCIO = 1;

-- BUSCAR LOS DATOS DEL PATRON QUE HAY ESTADO EN LA SALIDA CON EL BARCO 
-- PERTENECIENTE AL SOCIO 1
SELECT 
    (SELECT NOMBRE FROM PATRON WHERE ID_PATRON = 
        (SELECT ID_PATRON FROM SALIDAS WHERE ID_BARCO = 
            (SELECT ID_BARCO FROM BARCO WHERE ID_BARCO = SOCIOS_BARCO.ID_BARCO)
        )
    ) AS NOMBRE_PATRON
FROM SOCIOS_BARCO
WHERE ID_SOCIO = 1;

COMMIT;

