--Con dos guines medios escribimos comentarios
--Ctrl + S para guardar los cambios
/*
    comentarios 
        de 
     multiples 
      lineas
      
SQL-Lenguaje de consulta estructurado-(Strctured Query Lenguage)
Es un lenguaje para actualizar, obtener y calcular informacion en 
Base de datos -conjunto de datos organizados entre si y que so 
almacenados en tablas 
*/

--La estructura de las tablas queda casi siempre de la siguiente manera:
--Toda tabla debe llevar llave primaria. Cada registro es identificado
--por una llave primaria(primary key, ID)
--Puede tambien llevar llave foranea
--Tipo de datos(caracteres,numericos, tipo fecha, etc)

--NUMBER: Datos numericos
--NVARCHAR2: permite entrada de datos de tipo caracter  y alfanumerico
--NVARCHAR2 tiene como particularidad liberar espacio de memoria
--Por ejemplo, podemos tener un dato declarado con 30 caacteres. Pero si no
--se utiliza esos 30 caracteres, ese espacio es liberado
--DATE: Utilizamos para manejo de fecha y hora

--DDL: Data Definition Language(Creacion de tablas y estructuras)
--DML: Data Maniulation Language(Creacion y manipulacion de los mismos

--Sentencia para la creacion de tablas
--Vamos a crear una tabla de alumnos.

--Nombre, Apellido, Matricula
--Edad, La informacion debe estar correctamente definida o atomizada
--Fecha de Nacimiento
--Sexo o Genero
--Grado de Estudios
--Status (Activo o inactivo)
-- SE RECOMIENDA AMPLIAMENTE EL USO DE MAYUSCULAS

CREATE TABLE ALUMNO(
ID_ALUMNO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
FECHANAC DATE,
GENERO NVARCHAR2(10),
CURP NVARCHAR2(18),
GRADO NVARCHAR2(20),
STATUS NUMBER
);

--pARA VER LA ESTRUCTURA DE MI TABLA MEDIANTE COMANDOS O SENTENCIAS
--SE UTILIZA DESCRIBE NOMBRE DE LA ABLA

DESCRIBE ALUMNO;

--CREAR UNA TABLA AHORA CON CARRERAS O LICENCIATURAS PARA LOS AMUNNMOS

CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
DURACION NUMBER,
NUM_MATERIAS NUMBER
);

DESCRIBE CARRERAS;

--RENOMBRAR UNA COLUMNA EN UNA TABLA
ALTER TABLE CARRERAS RENAME COLUMN NUM_MATERIAS TO MATERIAS;

--MODIFICAR EL TIPO DE DATOS EN LA COLUMNA(FUNCIONA SIEMPRE Y CUANDO
--NO SE TENGAN DATOS EN ESA COLUMNA

ALTER TABLE CARRERAS MODIFY DURACION NVARCHAR2(20);

DESCRIBE CARRERAS;

--PARA RELACIONAR DATOS, POR EJEMPLO AQUI RELACIONAR A CADA ALUMNO
--CON LA CARRERA A LA CUAL PERTENECE
--ES MAS FACIL CREAR UNA TERCERA TABLA Y ESTABLECER ESA RELACION 

--CREAR UNA TABLA LLAMADA CARRERAS_ALUMNOS

CREATE TABLE CARRERAS_ALUMNOS(
ID_CA NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_CARRERA NUMBER
);

--CREANDO RESTRICCIONES EN NUESTRA TABLA
--AGREGANDO UNA RESTRICCION DE LA LLAVE  FORANEA

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO
FOREIGN KEY (ID_ALUMNO)--EN QUE COLUMNA VAMOS A RECIBIR LA LLAVE O DATO
REFERENCES ALUMNO (ID_ALUMNO);--DE DONDE VIENE (TABLA Y QUE COLUMNA)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA
FOREIGN KEY (ID_CARRERA)
REFERENCES CARRERAS (ID_CARRERA);

--PODEMOS ESTABLECER UNA RESTRICCION RESPECTO A LO QUE QUEREMOS 
--ESCRIBIR EN UNA DETERMINADA COLUMNA
--POR EJEMPLO EN LA TABLA ALUMNO UNICAMENE ESCRIBIR EN LA 
--COLUMNA DE GENERO QUE SEA SOLO 'MASCULINO' O 'FEMENINO'
ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_GENERO
CHECK(GENERO IN('MASCULINO','FEMENINO'));

--SENTENCIA PARA ELIMINAR UNA RESTRICCION 
ALTER TABLE ALUMNO DROP CONSTRAINT CHECK_GENERO;

ALTER TABLE CARRERAS_ALUMNOS DROP CONSTRAINT FK_ID_CARRERA;

--CREAR UNA RESTRICCION PARA NOMBRES UNICOS O REGISTROS UNICOS
--POR EJEMPLO, EN LA TABLA CARRERAS, TENEMOS NOMBRES DE LICENCIATURAS
--Y PUES ESTOS PUEDEN SER LOS MISMOS O REPETIRSE

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE(NOMBRE);

--INSERCION DE DATOS EN NUESTRAS TABLAS
--INSERTAR DATOS EN LA TABLA ALUMNO

DESCRIBE ALUMNO;
--CONSULTAR EL FORMATO DE FECHA DE MI SISTEMA
SELECT SYSDATE FROM DUAL;

INSERT INTO ALUMNO VALUES
(1,'ESMERALDA','05/09/90','FEMENINO','ESM900905MDF','8° SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(2,'OSCAR','05/09/90','MASCULINO','ESM900905MDF','8° SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(3,'RAFAEL','15/09/90','MASCULINO','RAF900905MDF','8° SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(4,'EDUARDO','13/01/97','MASCULINO','EDU900905MDF','8° SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(5,'BENIGNO','30/10/86','MASCULINO','BEN900905MDF','8° SEMESTRE',1);

--CONSULTA GRAL DE REGISTROS
--REALIZAR UNA CONSULTA GENERAL DE LOS DATOS DE UNA TABLA
SELECT * FROM ALUMNO;
--ACTUALIZAR UN DATO EN UN REGISTRO DETERMINADO
UPDATE ALUMNO SET FECHANAC='14/02/82' WHERE ID_ALUMNO=2;

UPDATE ALUMNO SET CURP='OSC920214HDF' WHERE ID_ALUMNO=2;

--REALIZAR UNA CONSULTA DE COLUMNAS ESPECIFICAS
SELECT NOMBRE FROM ALUMNO;

SELECT ID_ALUMNO,NOMBRE FROM ALUMNO;

--CONSULTANDO UN REGISTRO DETERMINADO
SELECT*FROM ALUMNO WHERE NOMBRE='ESMERALDA';

--COMO BORRAR UN REGISTRO ESPECIFICO DE UNA TABLA
DELETE FROM ALUMNO WHERE ID_ALUMNO=5;

--PARA CONFIRMAR CAMBIOS EN LOS REGISTROS INSERTAFOS
COMMIT;
--INSERTA REGISTROS EN NUESTRA TABLA CARRERAS
DESCRIBE CARRERAS;

INSERT INTO CARRERAS VALUES
(1,'ING EN SISTEMAS','EXACTAS','8 SEMESTRES',50);
INSERT INTO CARRERAS VALUES
(2,'MEDICINA','BIOLOGICAS','8 SEMESTRES',90);
INSERT INTO CARRERAS VALUES
(3,'NUTRICION','BIOLOGICAS','8 SEMESTRES',50);
INSERT INTO CARRERAS VALUES
(4,'DERECHO','HUMANIDADES','8 SEMESTRES',55);
INSERT INTO CARRERAS VALUES
(5,'MERCADOTECNIA','ECONOMIA','8 SEMESTRES',50);

SELECT*FROM CARRERAS;

--YA QUE TENEMOS INFORMACION EN NUESTRAS DOS PRIMERAS TABLAS
--QUE SON ENTIDADES FUERTES
--PODEMOS AHORA SI LLENAR O RELACIONAR LOS DATOS EN LA TABLA DE
--CARRERAS_ALUMNOS
DESCRIBE CARRERAS_ALUMNOS;
INSERT INTO CARRERAS_ALUMNOS VALUES(1,1,5);
INSERT INTO CARRERAS_ALUMNOS VALUES(2,2,4);
INSERT INTO CARRERAS_ALUMNOS VALUES(3,3,1);
INSERT INTO CARRERAS_ALUMNOS VALUES(4,4,2);
INSERT INTO CARRERAS_ALUMNOS VALUES(5,5,1);

SELECT * FROM CARRERAS_ALUMNOS;

COMMIT;

--AGREGAR UNA COLUMNAA UNA TABLA
DESCRIBE CARRERAS;

ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER(8,2);

SELECT * FROM CARRERAS;

--ACTUALIZAR EL VALOR DE UN REGISTRO
UPDATE CARRERAS SET PRESUPUESTO=200000.99 WHERE ID_CARRERA=2;
COMMIT;

--ELIMINAR UNA COLUMNA
ALTER TABLE CARRERAS DROP COLUMN PRESUPUESTO;

--BORRAR UN REGISTRO (FILA)
INSERT INTO ALUMNO VALUES
(6,'FILOMENO','05/09/70','MASCULINO','EMSM900905MDF','8° SEMESTRE',1);
DELETE FROM CARRERAS WHERE ID_CARRERA=6;

SELECT*FROM CARRERAS;
--PERMITIO BORARLA PORQUE NO ESTABA RELACIONADA

--EJERCICIO 1
--CREAR UNA TABLA QUE SE LLAME TUTORES
--LA TABLA DEBE LLEVAR LAS SIGUIENTES COLUMNAS
--ID DEL TUTOR (ID_TUTOR)PRIMARY KEY
--NOMBRE
--TELEFONO
--DIRECCION
--CLAVE DEL TUTOR(RESTRICCION DE SOLO PUEDA SER (A,B,C,D)
--CREAN UNA TABLA RELACIONAL QUE SE LLAME
--ALUMNOS_TUTORES
--LLEVARA 3 COLUMNAS
--ID_TABLA
--ID_ALUMNO
--ID_TUTOR
--CREAR SUS RESPECTIVAS LLAVES FORANEAS
--CADA TABLA MIN 5 REGISTROS

--CREAR TABLA TUTORES
CREATE TABLE TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
TELEFONO NVARCHAR2(10),
DIRECCION NVARCHAR2(50),
CLAVE_TUTOR NVARCHAR2(1)
);
DESCRIBE TUTORES; 
--CREAMOS LA TABLA RELACIONAL ALUMNOS_TUTORES
CREATE TABLE ALUMNOS_TUTORES(
ID_T_TUTORES NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER
);

--LLAVES FORANEAS
ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_TUTORES
FOREIGN KEY (ID_TUTOR)
REFERENCES TUTORES (ID_TUTOR);

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_ALUMNO2 
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO);

--RESTRICCION DE DATO  SOLO A,B,C,D
ALTER TABLE TUTORES ADD CONSTRAINT CHECK_CLAVE_TUTOR
CHECK(CLAVE_TUTOR IN('A','B','C','D'));
--LENAMOS REGISTROS
DESCRIBE TUTORES;
INSERT INTO TUTORES VALUES
(1,'RAUL GONZALES','5532789182','ATZCAPOTZALCO','A');
INSERT INTO TUTORES VALUES
(2,'FERNANDO TORRES','5532918623','JALISCO','B');
INSERT INTO TUTORES VALUES
(3,'DAVID VILLA ','5578954328','XALAPA','C');
INSERT INTO TUTORES VALUES
(4,'JUAN MATA','5584326289','POLANCO','D');
INSERT INTO TUTORES VALUES
(5,'SERGIO RAMOS','5538294678','PUEBLA','A');
--LLENAR DATOS DE LA TABA ALUMNOS_TUTORES
INSERT INTO ALUMNOS_TUTORES VALUES(1,2,3);
INSERT INTO ALUMNOS_TUTORES VALUES(2,3,4);
INSERT INTO ALUMNOS_TUTORES VALUES(3,4,3);
INSERT INTO ALUMNOS_TUTORES VALUES(4,5,2);
INSERT INTO ALUMNOS_TUTORES VALUES(5,1,2);

SELECT*FROM ALUMNOS_TUTORES;
SELECT*FROM TUTORES; 
COMMIT;
--CREAR TABLA PADRES
--QUE TENGA ID_PADRE
--NOMBRE ,DIRECCION,TELEFONO,GENERO
--CHECK GENERO:GENERO 'MASCULINO','FEMENINO'

--CREAR UNA TABLA RELACIONAL
--PADRES_ALUMNOS
--ID_PA
--ID_ALUMNO
--ID_PADRE
--CREAR SUS RESPECTIVAS LLAVES FORANEAS
--5 REGISTROS DE CADA TABLA
COMMIT;

--CREAR TABLA PADRES
CREATE TABLE PADRES(
ID_PADRE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(50),
TELEFONO NVARCHAR2(10),
GENERO NVARCHAR2(9)
);
--RESTRICCION MASCULINO Y FEMENINO
ALTER TABLE PADRES ADD CONSTRAINT CHECK_GENERO2
CHECK(GENERO IN('MASCULINO','FEMENINO'));

--CREANDO TABLA RELACIONAL PADRE_ALUMNO
CREATE TABLE PADRE_ALUMNO(
ID_PA NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_PADRE NUMBER
);
--CREANDO LLAVES FORANEAS
ALTER TABLE PADRE_ALUMNO ADD CONSTRAINT FK_ID_PADRE
FOREIGN KEY (ID_PADRE)
REFERENCES ALUMNO (ID_ALUMNO);

ALTER TABLE PADRE_ALUMNO ADD CONSTRAINT FK_ID_ 
FOREIGN KEY (ID_ALUMNO)
REFERENCES PADRES (ID_PADRE);

--LLENAMOS REGISTROS
DESCRIBE PADRES;
INSERT INTO PADRES VALUES
(1,'SERGIO CANALES','SANTANDER','7732789182','MASCULINO');
INSERT INTO PADRES VALUES
(2,'AMANDINE HENRY','LILLE','7732789182','FEMENINO');
INSERT INTO PADRES VALUES
(3,'MARCO ASENCIO','MALLORCA','5578954328','MASCULINO');
INSERT INTO PADRES VALUES
(4,'SOFIA HUERTA','BOISE','7732789182','FEMENINO');
INSERT INTO PADRES VALUES
(5,'DANIEL CARVAJAL','LEGANES','7732789182','MASCULINO');
SELECT*FROM PADRES;
--SE LLENA LA TABLA RELACIONAL
DESCRIBE PADRE_ALUMNO;
INSERT INTO PADRE_ALUMNO VALUES(1,1,1);
INSERT INTO PADRE_ALUMNO VALUES(2,2,2);
INSERT INTO PADRE_ALUMNO VALUES(3,3,3);
INSERT INTO PADRE_ALUMNO VALUES(4,4,4);
INSERT INTO PADRE_ALUMNO VALUES(5,5,5);

SELECT*FROM PADRE_ALUMNO;

COMMIT;

--SECUECIAS
--CEANDO SECUENCIAS
--SE EMPEAN PARA GENERAR VALORES DE NUMEROS ENTEROS
--DE PREFERENCIA SON CONSECUIVOS(INCREMENTO DE 1 EN 1)
--O PUEDEN SER CON UN INCREMENTO QUE NOSOTROS NECESITEMS
--SE UTILIZA PARA GENERAR LAS LLAVES PRIMARIAS Y ASI ASEGURARNOS
--QUE LOS VALORES NO SE REPITAN

--CRENADO UNA SECUENCIA DEFINIENDO LOS VALORES

CREATE SEQUENCE ALUMNO_SEQ--CREAMOS LA SECUENCIA Y SU NOMBRE
START WITH 6--EL VALOR A PARTIR DEL CUAL INICIA LA SECUENCIA
INCREMENT BY 1--INCREMENTA EL VALOR COMO SE LE INDIQUE 
MAXVALUE 999 --INDICAMOS EL VALOR MAXIMO HASTA QUE LLEGA LA SECUENCIA
MINVALUE 1 --INDICAMOS EL VALOR MINIMO DE LA SECUENCIA
NOCYCLE;--INDICAMOS SI LA SECUENCIA UNA VEZ FINALIZADASECICLE (CYCLE) NO 

--ELIMINAR SECUENCIA
DROP SEQUENCE ALUMNO_SEQ;

--CREAR UNA SECUENCIA CON VALORES POR DEFCTO(PARA TABLAS DE NUEVA
--CREACION)

--TRIGGER O DISPARADOR: EJECUTA UNA ACCION O DESNCADENA UN EVENTO

CREATE TRIGGER INSERT_IDALUMNO
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL;
END;

--INTENTANDO HACER UNA NUEVA INSERCION EN LA TABLA ALUMNO

DESCRIBE ALUMNO;
INSERT INTO ALUMNO VALUES
(1,'ALEJANDRO','24/11/85','MASCULINO','BARJ851124HVZ','8° SEMESTRE',1);

SELECT * FROM ALUMNO;

--CREANDO EL TRIGGER PARA LA TABLA TUTORES
CREATE TRIGGER INSERT_IDTUTORES
BEFORE INSERT ON TUTORES FOR EACH ROW BEGIN
SELECT TUTORES_SEQ.NEXTVAL INTO:NEW.ID_TUTOR FROM DUAL;
END;

DESCRIBE TUTORES;
INSERT INTO TUTORES VALUES
(1,'MARIELA','5572938154','PUEBLA','B');
SELECT*FROM TUTORES;

--OTRA FORMA DE INSERCION (MASIVA)
INSERT ALL
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS)VALUES
('PEDRO','18/01/97','MASCULINO','PEDR8906712','8°SEMESTRE',1)
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS)VALUES
('PABLO','18/01/98','MASCULINO','PADR8906712','8°SEMESTRE',1)
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS)VALUES
('HUGO','18/01/99','MASCULINO','HUGR8906712','8°SEMESTRE',1)
SELECT * FROM DUAL;

SELECT*FROM ALUMNO;

--EJERCICIO 1 GABINETE ABOGADOS
--CREANDO TABLA ASUNTO
CREATE TABLE ASUNTO(
ID_ASUNTO NUMBER PRIMARY KEY,
FECHA_INICIO DATE,
FECHA_CONCLUSION DATE,
ESTADO NVARCHAR2(9)
);
--CREAMOS SECUENCIA Y DISPARADOR
CREATE SEQUENCE ASUNTO_SEQ
START WITH 1
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
NOCYCLE;

CREATE TRIGGER INSERT_ID_ASUNTO
BEFORE INSERT ON ASUNTO FOR EACH ROW BEGIN
SELECT ASUNTO_SEQ.NEXTVAL INTO:NEW.ID_ASUNTO FROM DUAL;
END;
--CREANDO TABLA DATOS_CLIENTE
CREATE TABLE CLIENTE(
ID_CLIENTE NUMBER PRIMARY KEY,
DNI_CURP NVARCHAR2(30),
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10)
);
--CREAMOS SECUENCIA Y DISPARADOR
CREATE SEQUENCE CLIENTE_SEQ
START WITH 1
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
NOCYCLE;

CREATE TRIGGER INSERT_ID_CLIENTE
BEFORE INSERT ON CLIENTE FOR EACH ROW BEGIN
SELECT CLIENTE_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

DROP SEQUENCE DATOS_CLIENTE_SEQ;

--CREANDO TABLA DATOS_PROCURADOR
CREATE TABLE PROCURADOR(
ID_PROCURADOR NUMBER PRIMARY KEY,
DNI(CURP) NVARCHAR2(20),
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30)
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE PROCURADOR_SEQ
START WITH 1
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
NOCYCLE;

CREATE TRIGGER INSERT_ID_PROCURADOR
BEFORE INSERT ON PROCURADOR FOR EACH ROW BEGIN
SELECT PROCURADOR_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

--CREANDO TABLA RELACIONAL ASUNTO_CLIENTE
CREATE TABLE ASUNTO_CLIENTE(
ID_ASUCLIENTE NUMBER PRIMARY KEY,
ID_EXPEDIENTE NUMBER,
ID_CLIENTE NUMBER,
ID_PROCURADOR NUMBER
);
--CREANDO LLAVES FORANEAS
ALTER TABLE ASUNTO_CLIENTE ADD CONSTRAINT FK_ID_EXPEDIENTE
FOREIGN KEY (ID_ASUNTO)
REFERENCES ASUNTO (ID_ASUNTO);

ALTER TABLE ASUNTO_CLIENTE ADD CONSTRAINT FK_ID_ PROCURADOR
FOREIGN KEY (ID_PROCURADOR)
REFERENCES PROCURADOR (ID_PROCURADOR);

ALTER TABLE ASUNTO_CLIENTE ADD CONSTRAINT FK_ID_ CLIENTE
FOREIGN KEY (ID_DATOS_CLIENTE)
REFERENCES CLIENTE (ID_CLIENTE);

--EJERCICIO 2
CREATE TABLE SOCIO(
ID_SOCIO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10)
);
CREATE SEQUENCE SOCIO_SEQ;

CREATE TRIGGER INSERT_SOCIO
BEFORE INSERT ON SOCIO FOR EACH ROW BEGIN
SELECT SOCIO_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL
END;



CREATE TABLE BARCO(
ID_BARCO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
NUM_AMARRE NUMBER,
CUOTA NUMBER(8,2)
);

CREATE SEQUENCE BARCO_SEQ;

CREATE TRIGGER INSERT_BARCO
BEFORE INSERT ON BARCO FOR EACH ROW BEGIN
SELECT BARCO_SEQ.NEXTVAL INTO:NEW.ID_BARCO FROM DUAL;

CREATE TABLE PATRON(
ID_PATRON NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE PATRON_SEQ;

CREATE TRIGGER INSERT_PATRON
BEFORE INSERT ON PATRON FOR EACH ROW BEGIN
SELECT PATRON_SEQ.NEXTVAL INTO:NEW.ID_PATRON FROM DUAL;
END;

CREATE TABLE SOCIOS_BARCO(
ID_SB NUMBER PRIMARY KEY,
ID_SOCIO NUMBER,
ID_BARCO NUMBER,
CONSTRAINT FK_ID_SOCIO
FOREIGN KEY (ID_SOCIO)
REFERENCES SOCIO(ID_SOCIO),
CONSTRAINT FK_ID_BARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO)
);

CREATE SEQUENCE SOCIOSBARCO_SEQ;

CREATE TRIGGER INSERT_SOCIOSBARCO
BEFORE INSERT ON SOCIOS_BARCO FOR EACH ROW BEGIN
SELECT SOCIOSBARCO_SEQ.NEXTVAL INTO:NEW.ID_SB FROM DUAL;
END; 

CREATE TABLE SALIDAS(
ID_SALIDA NUMBER PRIMARY KEY,
DESTINO NVARCHAR2(30),
FECHASALIDA DATE,
ID_BARCO NUMBER,
ID_PATRON NUMBER,
CONSTRAINT FK_IDBARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO),
CONSTRAINT FK_IDPATRON
FOREIGN KEY (ID_PATRON)
REFERENCES PATRON(ID_PATRON)
);

CREATE SEQUENCE SALIDASBARCO_SEQ;

CREATE TRIGGER INSERT_SALIDASBARCO
BEFORE INSERT ON SALIDAS FOR EACH ROW BEGIN
SELECT SALIDASBARCO_SEQ.NEXTVAL INTO:NEW.ID_SALIDA FROM DUAL;
END;

COMMIT;

--INSERTAMOS DATOS EN NUETSRAS TABLAS

INSERT ALL
INTO SOCIO (NOMBRE,DIRECCION,TELEFONO) VALUES ('ESMERALDA','ACAPULCO','7444567434')
INTO SOCIO (NOMBRE,DIRECCION,TELEFONO) VALUES ('JOSE DAVID','CHIAPAS','9614567434')
INTO SOCIO (NOMBRE,DIRECCION,TELEFONO) VALUES ('JONATHAN','CHIAPAS','9619347245')
INTO SOCIO (NOMBRE,DIRECCION,TELEFONO) VALUES ('ANTONIO','EDO MEX','5634567434')
INTO SOCIO (NOMBRE,DIRECCION,TELEFONO) VALUES ('ALEX','EDO MEX','5534567434')
SELECT*FROM DUAL;

INSERT ALL
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN PABLO','MORELOS','7771234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('MARICELA','EDO MEX','557654321')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALFONSO','EDO MEX','567654321')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN OSMAR','VERACRUZ','2291234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('RAFAEL','QUERETARO','4421234567')
SELECT * FROM DUAL;

DESCRIBE BARCO;

INSERT ALL
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('LA NIÑA', 101, 1200.50)
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('LA PINTA', 102, 1800.50)
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('LA SANTA MARIA', 103, 2000.50)
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('PERLA NEGRA', 104, 5500.50)
INTO BARCO (NOMBRE,NUM_AMARRE,CUOTA) VALUES ('EL HOLANDES', 105, 3200.50)
SELECT * FROM DUAL;

INSERT ALL 
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (1,5)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (2,4)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (3,1)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (4,2)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (5,1)
SELECT * FROM DUAL;

INSERT ALL 
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('VERACRUZ',TO_DATE('16/06/2023 08:00:00', 'DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('VILLAHERMOSA',TO_DATE('17/06/2023 08:30:00', 'DD-MM-YYYY HH24:MI:SS'),2,2)
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('CAMPECHE',TO_DATE('18/06/2023 09:00:00', 'DD-MM-YYYY HH24:MI:SS'),3,3)
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('YUCATAN',TO_DATE('19/06/2023 08:40:00', 'DD-MM-YYYY HH24:MI:SS'),4,4)
INTO SALIDAS (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON)
VALUES ('CANCUN',TO_DATE('20/06/2023 10:00:00', 'DD-MM-YYYY HH24:MI:SS'),5,5)
SELECT * FROM DUAL;

SELECT * FROM SALIDAS;

COMMIT;

-- CONSULTAR HORA Y FECHA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA, 'DD-MM-YYYY HH24:MI:SS') FROM SALIDAS;

-- CONSULTAR UNICAMENTE HORARIO DE SALIDA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA, 'HH24:MI:SS') FROM SALIDAS;

COMMIT;

-- LA SENTENCIA PARA BORRAR REGISTROS ES CON
-- DELETE FROM 
DELETE FROM SALIDAS WHERE ID_SALIDA=5;

SELECT * FROM SALIDAS;

-- EXISTE UN COMANDO QUE NOS PERMITE REGRESAR AL ESTADO DEL ULTIMO COMMIT
-- ESTO SE LOGRA EN CASO DE INSERCIÓN, BORRADO O ACTUALIZADO DE DATOS
ROLLBACK;

-- COSULTAS CON COLUMNAS ESPECIFICAS
SELECT ID_SALIDA, DESTINO FROM SALIDAS;

SELECT * FROM BARCO;

-- REALIZANDO UNA CONSULTA CON ALGUNA CONDICION
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA>3000;

-- REALIZAR UNA CONSULTA CON MÁS CONDICIONES
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA>3000 AND NOMBRE='PERLA NEGRA';

-- REALIZAMOS UNA CONSULTA PARA BUSCAR RANGOS
SELECT * FROM BARCO WHERE CUOTA BETWEEN 1000 AND 3000;

SELECT * FROM ALUMNO;

-- BORRADO DE REGISTROS CON NOMBRE
DELETE FROM ALUMNO WHERE NOMBRE='ALEJANDRO';

COMMIT;

-- BUSCAR VALORES SIMILARES
SELECT * FROM ALUMNO WHERE NOMBRE LIKE 'E%';
SELECT * FROM ALUMNO WHERE NOMBRE LIKE '%O';

-- CONSULTA CON FUNCIONES DE VALORES MÁXIMOS Y MINIMOS
SELECT MAX(CUOTA) FROM BARCO;
SELECT MIN(CUOTA) FROM BARCO;

-- BUSCAR O CONSULTAR EL BARCO CON MAYOR CUOTA (FUNCIONES DE AGREGACIÓN)
SELECT * FROM BARCO WHERE CUOTA = (SELECT MAX(CUOTA) FROM BARCO);
-- SELECT * FROM BARCO WHERE CUOTA=5500.5;

-- REALIZAR UN CONTEO DE FILAS PARA DETERMINADOS DATOS
SELECT COUNT(ID_BARCO) FROM BARCO WHERE CUOTA<3000;

-- OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (CUOTA) FROM BARCO;

--REALIZAR LA SUMATORIA DE VALORES
SELECT SUM(CUOTA) FROM BARCO;

-- FUNCIONES GROUP BY -- ENTREVISTA
-- REALIZAR UN CONTEO DE ALUMNOS Y AGRUPAR CUANTOS HAY POR GENERO
SELECT COUNT (ID_ALUMNO),GENERO FROM ALUMNO GROUP BY GENERO;

SELECT * FROM ALUMNO;

-- ORDERNAR LOS REGISTROS POR ALGUNA COLUMNA, EN ESTE CASO POR LA COLUMNA NOMBRE
-- Y PODEMOS ORDENARLOS DE MANERA ASCENDENTE O DESCENDENTE

SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;

SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;

-- MOSTRAR EL TOTAL DE REGISTROS DE UNA TABLA
SELECT COUNT(ID_CA) FROM CARRERAS_ALUMNOS WHERE ID_CARRERA=1;

-- EJERCICIO DE CONSULTA DE DATOS--
-- BUSCAR LOS DATOS DEL PATRON QUE HAYA ESTADO EN LA SALIDA CON EL BARCO 
-- PERTENECIENTE AL SOCIO 1
--RESOLVERLO CON LO QUE HEMOS VISTO HASTA AHORITA

SELECT * FROM PATRON WHERE ID_PATRON=4;

COMMIT;

--PODRIAMOS EJECUTAR BUSQUEDAS POR SEPARADO Y POSTERIORMENTE UNIRLAS PARA 
--LLEGAR AL RESULTADO FINAL
--BUSCAMOS EL DATO DEL SOCIO 1, QUE  BARCO LE PERTENECE
SELECT * FROM SOCIOS_BARCO;
--AHORA BUSCAMOS EN QUE SALIDA ESTUVO PRESENTE EN ESE BARCO QUE PERTENECE AL SOCIO1
SELECT*FROM SALIDAS;

SELECT *FROM PATRON WHERE ID_PATRON =
(SELECT ID_SOCIO FROM SOCIOS_BARCO WHERE ID_SOCIO = 
(SELECT ID_BARCO FROM SALIDAS WHERE ID_BARCO=5))

SELECT * FROM PATRON 
WHERE ID_PATRON IN (SELECT ID_PATRON FROM SALIDAS WHERE ID_BARCO IN 
(SELECT ID_BARCO FROM SOCIOS_BARCO WHERE ID_SOCIO= 1));

--CONSULTAS CON JOINS
--INNER JOIN
--SE MUESTRAN LOS REGISTROS QUE COINCIDEN DE UNA TABLA 'A' Y UNA TABLA 'B'
--LA COINCIDENCIA SE DA GRACIAS AL DATO QUE COMPARTEN EN COMUN, QUE EN ESTE 
--CASO SON NUESTRAS LLAVES  PRIMARIAS Y LAS LLAVES FORANEAS

--FORMA EXPLICITA: INDICANDO LA SENTENCIA CON INNER JOIN O JOIN

--VAMOS A UNIR LA TABLA ALUMNOS 
--CON LA TABLA DE CARRERAS, PERO RECURRIMOS A LA TABLA RELACIONAL
SELECT*FROM ALUMNO;
SELECT*FROM CARRERAS;

--PRIMERO UNIMOS LA TABLA DE ALUMNO CON LA DE CARRERAS ALUMNOS, PORQUE AHI TIENEN
--UN CAMPO EN COMUN, QUE ES EL ID_ALUMNO(LLAVE PRIMARIA EN LA TABA ALUMNO
--LLAVE FORANEA EN LA TABLA CARRERAS_ALUMNO)

SELECT*FROM ALUMNO
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;


--PODEMOS UNIR AHORA LA SEGUNDA TABLA, QUE ES LA DE CARRERAS

SELECT * FROM ALUMNO
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO
INNER JOIN CARRERAS
ON CARRERAS_ALUMNOS.ID_CARRERA=CARRERAS.ID_CARRERA;

--PODEMOS IDENTIFICAR LAS TABLAS CON ALIAS
SELECT A.ID_ALUMNO, A.NOMBRE,C.NOMBRE FROM ALUMNO A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ID_ALUMNO = CA.ID_ALUMNO
INNER JOIN CARRERAS C
ON CA.ID_CARRERA=C.ID_CARRERA;

--REVISANDO LA CONSULTA CON LEFT JOIN
--PRIORIZA LA INFORMACION DE LA TABLA A, SOBRE LA TABLA B
SELECT * FROM ALUMNO
LEFT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

--REVISANDO LA CONSULTA CON RIGHT JOIN
--PRIORIZA LA INFORMACION DE LA TABLA B, SOBRE LA TABLA A

SELECT * FROM ALUMNO
RIGHT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

--TENEMOS TAMBIEN AL FULL OUTER JOIN, QUE MUESTRA TODO DE LAS TABLAS, HAYA COINCIDENCIAS 
--O NO(PUEDE FUNCIONAR SIN EL OUTER)

SELECT * FROM ALUMNO
FULL OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

SELECT * FROM ALUMNO
FULL JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

--RESOLVIENDO EL EJERCICIO ANTERIOR CON JOINS

SELECT * FROM PATRON P
INNER JOIN SALIDAS S
ON P.ID_PATRON=S.ID_PATRON
INNER JOIN SOCIOS_BARCO SB
ON SB.ID_BARCO = S.ID_BARCO
WHERE ID_SOCIO=1;

--SI NO QUEREMOS TODOS LOS DATOS SELECCIONAMOS LO QUE DESEAMOS

SELECT P.ID_PATRON,P.NOMBRE,P.DIRECCION,P.TELEFONO FROM PATRON P
INNER JOIN SALIDAS S
ON P.ID_PATRON=S.ID_PATRON
INNER JOIN SOCIOS_BARCO SB
ON SB.ID_BARCO = S.ID_BARCO
WHERE SB.ID_SOCIO=1;

