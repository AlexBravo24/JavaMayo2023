--Con dos guiones medios podemos escribir un comentario
--CRTL+s para guardar los cambios en el Script
/*
Comentarios 
de multiples
lineas 

SQL- Lenguaje de consulta estructurado-(Structure Query Languaje)
Es un lenguaje para actualizar, obtener y calcular información es
base de datos

Base de datos- Conjunto de datos organizados entre si, y que son almacenados 
en tablas

*/
--La estructura de las tablas queda casi siempre de la siguiente manera:
--Toda tabla debe llevar llave primaria.Cada registro es identificado
--por una llave primaria (primary key,ID)
--Puede llevar también llave foranea
--Tipo de datos (caracteres, númericos, tipo fecha, etc)

--NUMBER- Datos numéricos 
--NVARCHAR2- Permite entrada de datos de tipo caracter y alafanumericos
--NVARCHAR2 tiene la particularidad de liberar espacio de memoria 
-- Por ejemplo, podemos tener un dato declarado con 30 caracteres. Pero si no
-- se utilizan esos 30 caracteres, ese espacio es liberado
--DATE- Utilizados para manejo de fecha y hora 
--DDL Data Definition languaje - creacion de tablas y estructuras
--DMT Data Manipulation Languaje- Creación de registros y manipulación
--de los mismos


--SENTENCIA PARA LA CREACION DE TABLAS
-- Vamos a crear una tabla de alumnos 

--NOMBRE,APELLIDO, MATRICULA
--EDAD. LA INFORMACIÓN DEBE ESTAR CORRECTAMENTE DEFINIDA O ATOMIZADA.
--FECHA DE NACIMIENTO
-- SEXO O GENERO
-- GRADO DE ESTUDIOS
--CURP
--STATUS (ACTIVO O INACTIVO)

--RECOMIENDO AMPLIAMENTE EL USO DE MAYUSCULAS

CREATE TABLE ALUMNO(
ID_ALUMNO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
FECHANAC DATE,
GENERO NVARCHAR2(10),
CURP NVARCHAR2(18),
GRADO NVARCHAR2(20),
STATUS NUMBER
);

--PARA VER LA ESTRUCTURA DE MI TABLA MEDIANTE COMANDOS O SENTENCIAS
--SE UTILIZA DESCRIBE NOMBRE DE LATABLA;

DESCRIBE ALUMNO;

--CREAR UNA TABLA AHORA CON CARRERAS O LICENCIATURAS PARA LOS ALUMNOS 

CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
DURACION NUMBER,
NUM_MATERIAS NUMBER
);

DESCRIBE CARRERAS;

--RENOMBRAR UNA COLUMNA EN UNA TABLA
ALTER TABLE CARRERAS RENAME COLUMN NUM_MATERIAS TO MATERIAS;
DESCRIBE CARRERAS;

--MODIFICAR EL TIPO DE DATO EN LA COLUMNA(FUNCIONA SIEMPRE Y CUANDO 
--NO SE TENGAN DATOS EN ESA COLUMNA)
ALTER TABLE CARRERAS MODIFY DURACION NVARCHAR2(20);

DESCRIBE CARRERAS;
 
 --PARA RELACIONAR DATOS. POR EJEMPLO AQUI RELACIONAR A CADA ALUNMO
 
 
--CREAR UNA TABLA LLAMADA CARRERAS_ALUMNOS
CREATE TABLE CARRERAS_ALUMNOS(
ID_CA NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_CARRERA NUMBER
 );  
 DESCRIBE CARRERAS_ALUMNOS;

--CREANDO RESTRICCIONES EN NUESTRAS TABLAS
--LAS IDENTIFICAMOS POR EL COMANDO CONSTRAINT
--AGREGANDO UNA RESTRICCION DE LLAVE FORANEA
ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO
FOREIGN KEY(ID_ALUMNO)--EN QUE COLUMNA VAMOS A RECIBIR LA LLAVE O DATO
REFERENCES ALUMNO (ID_ALUMNO);--DE DONDE VIENE (TABLA Y QUE COLUMNA)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA
FOREIGN KEY (ID_CARRERA)
REFERENCES CARRERAS (ID_CARRERA);

--PODEMOS ESTABLECER UNA RESTRICCION RESPECTO A LO QUE QUEREMOS
--ESCRIBIR EN UNA DETERMINADA COLUMNA
--POR EJEMPLO EN LA TABLA ALUMNO UNICAMENTE ESCRIBIR EN LA 
--COLUMNA DE GENERO QUE SEA SOLO 'MASCULINO' O 'FEMENINO'
ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_GENERO
CHECK (GENERO IN('MASCULINO','FEMENINO'));

--SENTENCIA PARA ELIMINAR UNA RESTRICCION
ALTER TABLE ALUMNO DROP CONSTRAINT CHECK_GENERO;

--SENTENCIA CREAR UNA RESTRICCION PARA NOMBRES UNICOS O REGISTROS UNICOS
--POR EJEMPLO, EN LA TABLA CARRERAS, TENEMOS NOMBRES DE LICENCIATURAS
-- Y PUES ESTOS NO PUEDEN SER LOS MISMOS O REPETIRSE

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA--IDENTIFICAR LA RESTRICCION DE TIPO UNIQUE
UNIQUE (NOMBRE);

--INSERCIÓN DE DATOS EN NUESTRAS TABLAS
--INSERTAR DATOS EN LA TABLA ALUMNO

DESCRIBE ALUMNO;

--CONSULTAR EL FORMATO DE FECHA DE MI SISTEMA 
SELECT SYSDATE FROM DUAL;


INSERT INTO ALUMNO VALUES
(1,'ESMERALDA','05/09/1990','FEMENINO','ESM900905MDF','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(2,'OSCAR','05/09/1990','MASCULINO','ESM900905MDF','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(3,'RAFAEL','05/09/1990','MASCULINO','ESM900905MDF','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(4,'EDUARDO','13/01/1997','MASCULINO','EDU900905MDF','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(5,'BENIGNO','30/10/1986','MASCULINO','BEN900905MDF','8o SEMESTRE',1);

-- COMO REALIZAR UNA CONSULTA GENERAL DE LOS DATOS DE UNA TABLA 
SELECT * FROM ALUMNO;

--ACTUALIZAR UN DATO EN UN REGISTRO DETERMINADO
UPDATE ALUMNO SET FECHANAC='14/02/1982' WHERE ID_ALUMNO=2;
UPDATE ALUMNO SET CURP='OSC820214HDF' WHERE ID_ALUMNO=2;

--REALIZAR UNA CONSULTA DE COLUMNAS ESPECIFICAS
SELECT NOMBRE FROM ALUMNO;
SELECT ID_ALUMNO,NOMBRE FROM ALUMNO;

--CONSULTAR UN REGISTRO DETERMINADO
SELECT * FROM ALUMNO WHERE NOMBRE='ESMERALDA';

--COMO BORRAR UN REGISRTO ESPECIFICO DE UNA TABLA
DELETE FROM ALUMNO WHERE ID_ALUMNO=5;

SELECT * FROM ALUMNO;

--PARA CONFIRMAR CAMBIONS EN LOS REGISTROS INSERTADOS
COMMIT;

--INSERTAR REGISTROS EN NUESTRAS TABLAS DE CARERAS
DESCRIBE CARRERAS;

INSERT INTO CARRERAS VALUES
(1,'ING EN SISTEMAS','EXACTAS','8 SEMESTRES',50);
INSERT INTO CARRERAS VALUES
(2,'MEDICINA','BIOLOGICAS','10 SEMESTRES',90);
INSERT INTO CARRERAS VALUES
(3,'NUTRICION','BIOLOGICAS','8 SEMESTRES',50);
INSERT INTO CARRERAS VALUES
(4,'DERECHO','HUMANIDADES','8 SEMESTRES',55);
INSERT INTO CARRERAS VALUES
(5,'MERCADOTECNIA','ECONOMIA','8 SEMESTRES',60);

SELECT *FROM CARRERAS;

--YA QUE TENEMOS INFORMACION EN NUESTRAS DOS PRIMERAS TABLAS 
-- QUE SON ENTIDADES FUERTES
--PODEMOS AHORA SÍ LLENAR O RELACIONAR LOS DATOS EN LA TABLA DE 
--CARRERAS_ALUMNOS

--INSERTANDO DATOS EN LA TABLA CARRERAS_ALUMNOS 
DESCRIBE carreras_alumnos;
INSERT INTO carreras_alumnos VALUES(1,1,5);--DATOS TIENEN QUE EXISTIR PREVIAMENTE 
--PARA PODER EELACIONARSE
INSERT INTO carreras_alumnos VALUES(2,2,4);
INSERT INTO carreras_alumnos VALUES(3,3,1);
INSERT INTO carreras_alumnos VALUES(4,4,2);
INSERT INTO carreras_alumnos VALUES(5,5,1);

SELECT*FROM carreras_alumnos;-- NECESITAN EXISTIR LOS DATOS(ENTIDADES FUERTES) 
--PARA QUE LA TABLA PUEDE RELACIONARSE

COMMIT;

--AGREGAR UNA COLUMNA A UNA TABLA
DESCRIBE CARRERAS;

ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER(8,2);--SOLO PODEMOS TENER UN PRESUPUESTO 
--DE 999999.99 PESOS

--ACTUALIZAR UN VALOR DE UN REGISTRO
UPDATE CARRERAS SET PRESUPUESTO=200000.99 WHERE ID_CARRERA=2;

--ELIMINAR UNA COLUMNA 
ALTER TABLE CARRERAS DROP COLUM PRESUPUESTO;

--BORRAR UN REGISTRO (FILA)
DELETE FROM ALUMNO WHERE ID_ALUMNO=6;

SELECT * FROM CARRERAS;

--EJERCICIO 1
--CREAR UNA TABLA QUE SE LLAME TUTORES
--LA TABLA DEBE LLEVAR LAS SIGUIENTES COLUMNAS
--ID DEL TUTOR (ID_TUTOR)
--NOMBRE
--TELEFONO
--DIRECCION
--CLAVE DEL TUTOR (RESTRICCIÓN DE QUE LA CLAVE SOLO PUEDA SER A, B, C,D

--CREAN UNA TABLA RELACIONAL QUE SE LLAME
--ALUMNOS_TUTORES
--LLEVARIA 3 COLUMNAS
--ID  DE LA TABLA DEL ALUMNO
--ID DE LA TABLA TUTOR
--CREAN SUS RESPECTIVAS LLAVES FORANEAS 
--CADA TABLA CON MINIMO 5 REGISTROS

-- CREAR TABLA TUTORES
CREATE TABLE TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
TELEFONO NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
CLAVE_DEL_TUTOR NVARCHAR2(10)
);
DESCRIBE TUTORES;
SELECT *FROM TUTORES;
--GENERAMOS RENSTRICCIONES 
ALTER TABLE TUTORES ADD CONSTRAINT CHECK_CLAVE
CHECK (CLAVE_DEL_TUTOR IN('A','B','C','D'));

--CREAR UNA TABLA LLAMADA ALUMNOS_TUTORES--TABLA RELACIONAL 
--CONSCIENTES DE DONDE VIENE EL DATO Y DONDE LO VAMOS A PONER
CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTORES NUMBER
 );  
 DESCRIBE ALUMNOS_TUTORES;
 --GENERAR LLAVES FORANEAS ALUMNO TUTORES
 ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_ALUMNO2
FOREIGN KEY(ID_ALUMNO)--NOMBRE DE LA COLUMNA DONDE VAMOS A RECIBIR LA CLAVE DEL ALUMNO
REFERENCES ALUMNO (ID_ALUMNO);--DE DONDE VIENE (TABLA Y QUE COLUMNA)

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_TUTORES
FOREIGN KEY(ID_TUTORES)--NOMBRE DE LA COLUMNA DONDE VAMOS A RECIBIR LA CLAVE DEL TUTOR
REFERENCES TUTORES (ID_TUTOR);--DE DONDE VIENE (TABLA Y QUE COLUMNA)

--INSERTAR REGISTROS EN NUESTRAS TABLAS DE TUTORES
DESCRIBE TUTORES;

INSERT INTO TUTORES VALUES
(101,'JORGE','777 457 9698','COL. XOCITL #10','A');
INSERT INTO TUTORES VALUES
(102,'ESMERALDA','777 632 4798','COL. XOCITL #10','B');
INSERT INTO TUTORES VALUES
(103,'JHONATHAN','734 965 2147','COL. XOCITL #10','C');
INSERT INTO TUTORES VALUES
(104,'RAFAEL','734 556 7985','COL. XOCITL #10','D');
INSERT INTO TUTORES VALUES
(105,'OSCAR','756 963 8542','COL. XOCITL #10','A');
SELECT *FROM TUTORES;

--INSERTANDO DATOS EN LA TABLA ALUMNOS_TUTORES 
DESCRIBE ALUMNOS_TUTORES;
INSERT INTO ALUMNOS_TUTORES VALUES(1,1,105);--DATOS TIENEN QUE EXISTIR PREVIAMENTE 
--PARA PODER EELACIONARSE
INSERT INTO ALUMNOS_TUTORES VALUES(2,2,104);
INSERT INTO ALUMNOS_TUTORES VALUES(3,3,101);
INSERT INTO ALUMNOS_TUTORES VALUES(4,4,102);
INSERT INTO ALUMNOS_TUTORES VALUES(5,5,103);
SELECT *FROM ALUMNOS_TUTORES;--RELACIONAMOS QUE ALUMNO ESTA CON QUE TUTOR 
COMMIT;

--CREANDO TABLA PADRES 
CREATE TABLE PADRES(
ID_PADRES NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(20),
GENERO NVARCHAR2 (30)
 ); 
--GENERAMOS RESTRICCIONES 
ALTER TABLE PADRES ADD CONSTRAINT CHECK_GENERO1
CHECK (GENERO IN('MASCULINO','FEMENINO'));
--LLENAMOS REGISTROS
DESCRIBE PADRES;
INSERT INTO PADRES VALUES
(1,'CRISTIANO RONALDO','AV. PORTUGAL SIEMPRE SIUU','777 456 2198','MASCULINO');
INSERT INTO PADRES VALUES
(2,'BICHO','AV. BICHO SIEMPRE SIUU','55 4564 4254','MASCULINO');
INSERT INTO PADRES VALUES
(3,'COMANDANTE','COL. SIUU COMANDANTE','734 894 7456','MASCULINO');
INSERT INTO PADRES VALUES
(4,'GUADALUPE FLORES','COL. CAMPESTRE #2','777 215 6395','FEMENINO');
INSERT INTO PADRES VALUES
(5,'CRISTINA CASTRO','CALLE NO PODRAS. COL OXXO','COL. XOCITL #10','FEMENINO');
SELECT *FROM PADRES;

--CREAMOS TABLA RELACIONAL (ENTIDAD DEBIL)
CREATE TABLE PADRES_ALUMNOS(
ID_PA NUMBER PRIMARY KEY,
ID_PADRES NUMBER,
ID_ALUMNOS NUMBER
);
--GENERAR LLAVES FORANEAS 
ALTER TABLE PADRES_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNOP
FOREIGN KEY(ID_ALUMNOS)--NOMBRE DE LA COLUMNA DONDE VAMOS A RECIBIR LA CLAVE DEL ALUMNO
REFERENCES ALUMNO (ID_ALUMNO);--DE DONDE VIENE (TABLA Y QUE COLUMNA)

ALTER TABLE PADRES_ALUMNOS ADD CONSTRAINT FK_ID_PADRE
FOREIGN KEY(ID_PADRES)--NOMBRE DE LA COLUMNA DONDE VAMOS A RECIBIR LA CLAVE DEL ALUMNO
REFERENCES PADRES (ID_PADRES);--DE DONDE VIENE (TABLA Y QUE COLUMNA)

DESCRIBE PADRES_ALUMNOS;
INSERT INTO PADRES_ALUMNOS VALUES(1,3,2);
INSERT INTO PADRES_ALUMNOS VALUES(2,4,3);
INSERT INTO PADRES_ALUMNOS VALUES(3,1,4);
INSERT INTO PADRES_ALUMNOS VALUES(4,2,1);
INSERT INTO PADRES_ALUMNOS VALUES(5,5,5);
SELECT * FROM PADRES_ALUMNOS;
COMMIT;

--SECUENCIAS 
--CREANDO SECUENCIAS 
--SE EMPLEAN PARA GENERAR VALORES DE NUMEROS ENTEROS
--DE PREFERENCIA SON CONSECUTIVOS (INCREMENTO DE 1 EN 1)
--O PUEDEN SER CON UN INCREMENTO QUE NOSOTROS NECESITEMOS 
-- ES UN CONTADOR QUE NO EJECUTA NINGUNA ACCION
--SE UTILIZAN PARA GENERAR LAS LLAVES PRIMARIAS Y ASEGURARNOS QUE LOS VALORES
--NO SE REPITAN, CONTEO DE LAS LLAVES PRIMARIAS

--HAY DOS MANERAS DE CREAR SECUENCIAS: VALORES POR DEFECTO O DEFINIENDO LOS VALORES
--DEFINIENDO LOS VALORES QUEREMOS UN INCREMENTO ESPECIFO O SI YA TENEOS DATOS EN UNA TABLA
--CUANDO YA TENEMOS UNA TABLA CREADA PODEMOS DEFINIR NOSOTROS LOS VALORES
--SECUENCIA POR DEFECTO: LA SECUENCIA CUANDO QUIERA GENERAR LOS ID´S EN LA TABLA
--VA QUERER EMPEZAR A PARTIR  DEL VALOR 1

--CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES

CREATE SEQUENCE ABOGADOS_SEQ--CREAMOS LA SECUENCIA Y NOMBRE 
START WITH 5--INDICAMOS QUE INICIE A PARTIR DE QUE VALOR, 
--ES DECIR QUE INICIE A PARTIR DEL REGISTRO 5, EL VALOR A PARTIR DEL CUAL INICIA
--LA SECUENCIA
INCREMENT BY 1--CUANTO SE VA INCREMENTA EL VALOR, INCREMENTA EL VALOR COMO
--SE LE INDIQUE, ESTE CASO DE 1 EN 1
MAXVALUE 999-- INDICAMOS EL VALOR MÁXIMO HASTA EL QUE LLEGA LA SECUENCIA
MINVALUE 1--VALOR MINIMO DE LA SECUENCIA 
NOCYCLE;--INDICAMOS SI LA SECINCIA UNA VEZ FINALIZADA DE CICLE (CYCLE) O NO

--CREAR SECUENCIA CON VALORES POR DEFECTO(PARA TABLAS DE NUEVA 
--CREACIÓN)
CREATE SEQUENCE TUTORES_SEQ; --SE CREA UNA SECUNCIA QUE VA EMPEZAR A PARTIR
--DEL NUMERO 1 HASTA VALORES INIMGINABLES DE REGISTRO

--TRIGGER O DISPARADOR -EJECUTAR UNA ACCIÓN DESENCADENA UN EVENTO

CREATE TRIGGER INSERT_ID_ABOGADOS--INSERTAR UN ID EN  UNA TABLA
BEFORE INSERT ON ABOGADOS FOR EACH ROW BEGIN --INDICAMOS QUE VA 
--HACER EL DISPARADOR, ANTES DE HACER UNA INSERCCION O UN REGISTRO EN MI TABLA ALUMNO
SELECT ABOGADOS_SEQ.NEXTVAL INTO:NEW.ID_ABOGADO FROM DUAL;--VA SELECCIONAR LA SECUENCIA 
END;
--QUE CREAMOS PARA ESTA TABLA, VA TOMAR EL SIGUIENTE VALOR 
--DONDE SE QUEDO LA SECUENCIA PARA HACER UNA NUEVA INSERCIÓN DE UN ID.
--VA HACR UNA NUEVA INSERCION APOYADA EN LA SECUENCIA DE UN NUEVO ID_ABOGADO
--Y VA TOMAR ESE VALOR DEL DUAL; UNA ESPECIE DE CACHE, DE CONTEO QUE ESTA AHI
--EN EL SEGUNDO PLANO EN DONDE YA SE VA TOMAR ESE VALOR

--INTENTANDO HACER UNA NUEVA INSERCIÓN EN LA TABLA ABOGADOS
DESCRIBE ABOGADOS;
INSERT INTO ABOGADOS VALUES--AL PONER ASI ESTAMOS DANDO POR HECHO QUE VAMOS
--A INSERTAR TODOS LOS VALORES, POR REQUISITO INDICAR EL ID CON EL NUMERO QUE 
--SEA POR QUE YA TENEMOS ENLAZADO UN TRIGGER Y UNA SECUENCIAN 
(1,'JUAN','551584JUAN5154','TACOS');
SELECT*FROM ABOGADOS;

--CREANDO TRIGGER TUTORES
CREATE TRIGGER INSERT_ID_TUTORES--INSERTAR UN ID EN  UNA TABLA
BEFORE INSERT ON TUTORES FOR EACH ROW BEGIN --INDICAMOS QUE VA 
--HACER EL DISPARADOR, ANTES DE HACER UNA INSERCCION O UN REGISTRO EN MI TABLA ALUMNO
SELECT TUTORES_SEQ.NEXTVAL INTO:NEW.ID_TUTOR FROM DUAL;--VA SELECCIONAR LA SECUENCIA 
END;

INSERT INTO TUTORES VALUES
(1,'ROCA','74585262563','MEXICO','B');--VER EL ERROR
DESCRIBE ABOGADOS;
--OTRA FROMA DE INSERCIÓN_INSERCIÓN MASIVA
INSERT ALL
INTO ABOGADOS (NOMBE_ABOGADO,RFC,CASO)VALUES
('GALLO','JSJSGA55456','PELEA')
INTO ABOGADOS (NOMBE_ABOGADO,RFC,CASO)VALUES
('LALO','JSJSGA55456','MALTRATO')
INTO ABOGADOS (NOMBE_ABOGADO,RFC,CASO)VALUES
('NEYMAR','JSJSGA55456','NO ERA PENAL')
INTO ABOGADOS (NOMBE_ABOGADO,RFC,CASO)VALUES
('BICHO','JSJSGA55456','SIIUUU')
SELECT *FROM DUAL;

--EJERCICIO 1



--EJERCICO EN CLASE  tablas relacionales
-- 1:1 o 1:M
--EJERCICO 3
-- PRIMERO CREAMOS LAS ENTIDADES FUERTES 
CREATE TABLE SOCIO(
ID_SOCIO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(50),
DIRECCION NVARCHAR2(50),
TELEFONO NVARCHAR2(15)
);
CREATE SEQUENCE SOCIO_SEQ;
CREATE TRIGGER INSERT_SOCIO
BEFORE INSERT ON SOCIO FOR EACH ROW BEGIN
SELECT SOCIO_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL;
END;

CREATE TABLE BARCO(
ID_BARCO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(50),
NUMERO_AMARRE NUMBER,
CUOTA NUMBER (8,2)
);
CREATE SEQUENCE BARCO_SEQ;
CREATE TRIGGER INSERT_BARCO
BEFORE INSERT ON BARCO FOR EACH ROW BEGIN
SELECT BARCO_SEQ.NEXTVAL INTO:NEW.ID_BARCO FROM DUAL;
END;

CREATE TABLE PATRON(
ID_PATRON NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(50),
DIRECCION NVARCHAR2(100),
TELEFONO NVARCHAR2(20)
);
CREATE SEQUENCE PATRON_SEQ;
CREATE TRIGGER INSERT_PATRON
BEFORE INSERT ON PATRON FOR EACH ROW BEGIN
SELECT PATRON_SEQ.NEXTVAL INTO:NEW.ID_PATRON FROM DUAL;
END;

--CREAMOS TABLAS ENTIDADES DEBILES
CREATE TABLE SOCIOS_BARCO(
ID_SB NUMBER PRIMARY KEY,
ID_SOCIO NUMBER,
ID_BARCO NUMBER,
--AÑADIR RESTRICCIONES DENTRO DEL PARENTESIS
CONSTRAINT FK_ID_SOCIO
FOREIGN KEY (ID_SOCIO)
REFERENCES SOCIO (ID_SOCIO),
CONSTRAINT FK_ID_BARCOS
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO (ID_BARCO)
);
CREATE SEQUENCE SOCIOSBARCO_SEQ;
CREATE TRIGGER INSERT_SOCIOSBARCO
BEFORE INSERT ON SOCIOS_BARCO FOR EACH ROW BEGIN
SELECT SOCIOSBARCO_SEQ.NEXTVAL INTO:NEW.ID_SB FROM DUAL;
END;

CREATE TABLE SALIDAS(
ID_SALIDAS NUMBER PRIMARY KEY,
DESTINO NVARCHAR2(50),
FECHA_SALIDA DATE, 
ID_BARCO NUMBER,
ID_PATRON NUMBER,
CONSTRAINT FK_ID_BARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO (ID_BARCO),
CONSTRAINT FK_ID_PATRON
FOREIGN KEY(ID_PATRON)
REFERENCES PATRON(ID_PATRON)
);
CREATE SEQUENCE SALIDASBARCO_SEQ;
CREATE TRIGGER INSERT_SALIDASBARCO
BEFORE INSERT ON SALIDAS FOR EACH ROW BEGIN
SELECT SALIDASBARCO_SEQ.NEXTVAL INTO:NEW.ID_SALIDAS FROM DUAL;
END;
--*****************************************************************************
--INSERTAR DATOS EN NUESTRAS TABLAS 

INSERT ALL
INTO SOCIO(NOMBRE,DIRECCION,TELEFONO)VALUES
('ESMERALDA','ACAPULCO','55 4512 1244')
INTO SOCIO(NOMBRE,DIRECCION,TELEFONO)VALUES
('JOSE DAVID','CHIAPAS','55 4521 1244')
INTO SOCIO(NOMBRE,DIRECCION,TELEFONO)VALUES
('JONATHAN','CHIAPAS','55 5741 4584')
INTO SOCIO(NOMBRE,DIRECCION,TELEFONO)VALUES
('ANTONIO','EDO. MEX','55 6612 9044')
INTO SOCIO(NOMBRE,DIRECCION,TELEFONO)VALUES
('ALEX','ACAPULCO','55 4512444')
SELECT * FROM DUAL;

INSERT ALL
INTO PATRON(NOMBRE,DIRECCION,TELEFONO)VALUES
('JUAN PABLO','ACAPULCO','55 4512 1244')
INTO PATRON(NOMBRE,DIRECCION,TELEFONO)VALUES
('MARICELA','EDO.MEXICO','55 4521 1244')
INTO PATRON(NOMBRE,DIRECCION,TELEFONO)VALUES
('ALFONSO','EDO. MEXICO','55 5741 4584')
INTO PATRON(NOMBRE,DIRECCION,TELEFONO)VALUES
('JUAN OSMAR','EDO. MEX','55 6612 9044')
INTO PATRON(NOMBRE,DIRECCION,TELEFONO)VALUES
('RAFAEL','QUERETARO','55 4512444')
SELECT * FROM DUAL;

DESCRIBE BARCO;

INSERT ALL
INTO BARCO (NOMBRE,NUMERO_AMARRE,CUOTA)VALUES ('LA NIÑA',101,1200.50)
INTO BARCO (NOMBRE,NUMERO_AMARRE,CUOTA)VALUES ('LA PINTA',102,1800.50)
INTO BARCO (NOMBRE,NUMERO_AMARRE,CUOTA)VALUES ('LA SANTA MARIA',103,2000.50)
INTO BARCO (NOMBRE,NUMERO_AMARRE,CUOTA)VALUES ('LA PERLA NEGRA',104,5500.50)
INTO BARCO (NOMBRE,NUMERO_AMARRE,CUOTA)VALUES ('EL HOLANDES',105,3200.50)
SELECT * FROM DUAL;

INSERT ALL 
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (1,5)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (2,4)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (3,1)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (4,2)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (5,1)
SELECT * FROM DUAL;
DESCRIBE SALIDAS;
INSERT ALL 
INTO SALIDAS (DESTINO,FECHA_SALIDA,ID_BARCO,ID_PATRON)
VALUES('VERACRUZ',TO_DATE('16/06/2023 08:00:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS (DESTINO,FECHA_SALIDA,ID_BARCO,ID_PATRON)
VALUES('VERACRUZ',TO_DATE('17/06/2023 08:30:00','DD-MM-YYYY HH24:MI:SS'),2,2)
INTO SALIDAS (DESTINO,FECHA_SALIDA,ID_BARCO,ID_PATRON)
VALUES('CAMPECHE',TO_DATE('18/06/2023 09:00:00','DD-MM-YYYY HH24:MI:SS'),3,3)
INTO SALIDAS (DESTINO,FECHA_SALIDA,ID_BARCO,ID_PATRON)
VALUES('YUCATAN',TO_DATE('19/06/2023 08:40:00','DD-MM-YYYY HH24:MI:SS'),4,4)
INTO SALIDAS (DESTINO,FECHA_SALIDA,ID_BARCO,ID_PATRON)
VALUES('CANCUN',TO_DATE('20/06/2023 10:00:00','DD-MM-YYYY HH24:MI:SS'),5,5)
SELECT *FROM DUAL;
--*****************************************************************************

--CONSULTAR HORA Y FECHA
SELECT ID_SALIDAS,DESTINO,TO_CHAR(FECHA_SALIDA,'DD-MM-YYYY HH24:MI:SS')FROM SALIDAS;

--*****************************************************************************

--LA SENTENCIA  PARA BORRAR REGISTROS ES CON
--DELETE FROM, QUIERO BORRAR LA SALIDA 5, ENTIDAD DBEIL SE PUEDE, FUERTE NO
--DELETE FROM SALIDAS WHERE ID_SALIDAS=5;
DELETE FROM SALIDAS--SE VA ALV TODO EL REGISTRO
--EXISTE UN COMANDO QUE NOS PERMITE REGRESAR AL ESTADO DEL ULTIMO COMMIT
--ESTO SE LOGRA EN CASO DE INSERCIÓN,BORRADO O ACTUALIZADO DE DATOS
ROLLBACK;--SOLO APLICA CON REGISTROS NO CON TABLAS
--SI SE BORRA LA TABLA PIERDA LA ESTRUCUTURA
--PARA BORRAR ENTIDAD FUERTE PRIMERO ELIMINAR ENTIDAD DEBIL

SELECT ID_SALIDAS,DESTINO FROM SALIDAS;
SELECT ID_SALIDAS,DESTINO FROM SALIDAS WHERE ID_SALIDAS=1;
SELECT *FROM BARCO;
--REALIZANDO CONSULTA CON ALGUNA CONDICION
SELECT ID_BARCO,NOMBRE FROM BARCO WHERE CUOTA>3000;

--REALIZAR UNA CONSULTA CON MAS CONDICIONES
SELECT ID_BARCO,NOMBRE FROM BARCO WHERE CUOTA>3000 AND NOMBRE='LA PERLA NEGRA';

--REALIZAR UNA CONSULTA PARA BUSCAR RANGOS
SELECT *FROM BARCO WHERE CUOTA BETWEEN 1000 AND 3000;


SELECT * FROM ALUMNO;
--*****************************************************************************

--BORRADO DE REGISTRO CON NOMBRE
DELETE FROM ALUMNO WHERE NOMBRE='PEDRO NAVAJAS';
ROLLBACK;

COMMIT;

--*****************************************************************************

--BUSCAR VALORES SIMILARES 
SELECT * FROM ALUMNO WHERE NOMBRE='EDUARDO';
SELECT *FROM ALUMNO WHERE NOMBRE LIKE 'E%';--TODOS LOS NOMBRES 
--DE LOS ALUMNOS QUE EMPIECEN CON LA LETRA 'E'
SELECT *FROM ALUMNO WHERE NOMBRE LIKE '%O';--TODOS LOS NOMBRES 
--DE LOS ALMNOS QUE TERMINEN CON LA LETRA 'O'
--*****************************************************************************
--CONSULTA DE VALORES MAXIMOS Y MINIMOS 
SELECT MAX(CUOTA)FROM BARCO;--EL VALOR MAXIMO DE LA COLUMNA CUOTA 
--DE LA TABLA BARCO
SELECT MIN(CUOTA)FROM BARCO;--EL VALOR MIN DE LA COLUMNA CUOTA 
--DE LA TABLA BARCO

--TENIENDO EN CUENTA ESAS DOS FUNCIONES(SUBCONSULTAS) PODEMOS 
--BUSCARO CONSULTAR EL BARCO CON MAYOR CUOTA PERO QUE NOS MUESTRE 
--TODO EL REGISTRO
--FUNCIONES DE AGREGACION
SELECT * FROM BARCO WHERE CUOTA =(SELECT MAX(CUOTA)FROM BARCO);
--PARA BUSCAR TODOS LOS VALORES DE UN REGISTRO ES CON 
SELECT * FROM BARCO;
--DESPUES SE PROCEDE A PONNER UNA CONDICION (WHERE) DONDE 
--LA CUOTA ES IGUAL A 7894.52 PERO TAMBIEN DONDE LA CUOTA SEA IGUAL A LA 
--A LA FUNCION(SELECT MAX(CUOTA)FROM BARCO)
SELECT * FROM BARCO WHERE CUOTA =7894.52;
SELECT * FROM BARCO WHERE CUOTA =(SELECT MAX(CUOTA)FROM BARCO);

--*****************************************************************************

--REALIZAR UN CONTEO DE FILAS PARA DETERMINADOS DATOS 
--CUANTOS REGISTROS EXISTEN CON DETERMINADA CONDICION
SELECT COUNT(ID_BARCO) FROM BARCO WHERE CUOTA<3000;

--OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG(CUOTA)FROM BARCO;

--REALIZAR SUMATORIA DE VALORES DE UNA COLUMNA 
SELECT SUM(CUOTA) FROM BARCO;

--*****************************************************************************

--FUNCIONES PARA AGRUPAR_GROUP BY--ENTREVISTA
--REALIZAR UN CONTEO DE ALUMNOS Y AGRUPAR CUANTOS HAY POR GENERO
SELECT COUNT (ID_ALUMNO),GENERO FROM ALUMNO GROUP BY GENERO;
--CONTAR CUANTOS ALUMNOS HAY(SELECT COUNT) CUANTOS REGISTROS DE 
--LA COLUMNA ID_ALUMNO EXISTEN Y SE MUESTRA LA COLUMNA 
--GENERO (GENERO FROM ALUMNO)DE LA TABLA ALUMNO Y 
--VAMOS AGRUPAR A LOS ALUMNOS POR GENERO (GROUP BY)
COMMIT;

--*****************************************************************************

SELECT *FROM ALUMNO;

--ORDENAR LOS REGISTROS POR ALGUNA COLUMNA, EN ESTE CASO 
--POR LA COLUMNA NOMBRES
--Y PODEMOS ORDENARLOS DE MANERA ASCENDENTE O DESCENDENTE 

SELECT*FROM ALUMNO ORDER BY NOMBRE DESC;
SELECT*FROM ALUMNO ORDER BY NOMBRE ASC;
--DEPENDE QUE COLUMNA DE LA TABLA SE BUSQUE ODENAR 
SELECT*FROM ALUMNO ORDER BY ID_ALUMNO DESC;
SELECT*FROM ALUMNO ORDER BY ID_ALUMNO ASC;
COMMIT;
--*****************************************************************************

--MOSTRAR EL TOTAL DE REGISTROS DE UNA TABLA
SELECT (ID_ALUMNO)FROM ALUMNO WHERE ID_ALUMNO=1;

SELECT ID_CARRERA FROM CARRERAS WHRRE ID_CARRERA=1;
SELECT COUNT (ID_CA)FROM CARRERAS_ALUMNOS WHERE ID_CARRERA=1;
SELECT COUNT (ID_CA)FROM CARRERAS_ALUMNOS WHERE ID_CARRERA=
(SELECT (ID_ALUMNO)FROM ALUMNO WHERE ID_ALUMNO=1);
COMMIT;

--*****************************************************************************
--TAREA
--EJERCICIO DE CONSULTA DE DATOS--
--VAMOS A BUSCAR LOS DATOS DEL PATRON QUE HAYA ESTADO EN LA SALIDA CON EL BARCO
--PERTENECIENTE AL SOCIO 1

SELECT* FROM PATRON WHERE  ID_PATRON=4;
COMMIT;
--*****************************************************************************
--BUSCAMOS EL DATO DEL SOCIO 1, QUE BARCO LE PERTENECE 
SELECT * FROM SOCIOS_BARCO;

--AHORA BUSCAMOS EN QUE SALIDA ESTUVO PRESENTE ESE BARCO QUE PERTENECE AL SOCIO1 
SELECT * FROM SALIDAS;

--MIN28
SELECT * FROM PATRON WHERE ID_PATRON=
(SELECT ID_SOCIO FROM SOCIOS_BARCO WHERE ID_BARCO=
(SELECT ID_BARCO FROM SALIDAS WHERE ID_PATRON=5));

--RESPUESTA CORRECTA
SELECT * FROM PATRON WHERE ID_PATRON =
(SELECT ID_PATRON FROM SALIDAS WHERE ID_BARCO =
(SELECT ID_BARCO FROM SOCIOS_BARCO WHERE ID_SOCIO=1));
--******************************************************************************
COMMIT;
--*****************************************************************************
--*****************************************************************************
--INNER JOIN
--SE MUESTRAN LOS REGISTROS QUE COINCIDEN DE UNA TABLA 'A' Y UNA TABLA 'B'
--LA COINCIDENCIA SE DA GRACIAS AL DATO QUE COMPARTEN EN COMÚN, QUE EN ESTE
--CASO SON NUESTRAS LLAVES PRIMARIAS Y LAS LLAVES FORANEAS
--CONSULTAS CON JOINS, NOS PERMITEN UNIR LAS TABLAS MEDIANTE ID´S

--FORMA EXPLICITA- INDICANDO LA SENTENCIA CON INNER JOIN O JOIN

--VAMOS UNIR LA TABLA DE ALUMNOS 
--CON LA TABLA DE CARRERAS, PERO RECURRIOMOS A LA TABLA RELACIONAL 
SELECT *FROM ALUMNO;
SELECT* FROM CARRERAS;

--PRIMERO UNIMOS LA TABLA DE ALUMNO CON LA TABLA DE CARRERAS ALUMNO
--,POR QUE AHI TIENEN UN CAMPO EN COMÚN, QUE ES EL ID_ALUMNO (LLAVE
--PRIMARIA DE LA TABLA ALUMNO, LLAVE FORANEA EN LA TABLA 
--CARRERAS_ALUMNOS, CON LOS JOINS PODEMOS UNIR TABLA CON L TABLA

SELECT *FROM ALUMNO
INNER JOIN CARRERAS_ALUMNOS 
ON ALUMNO.ID_ALUMNO= CARRERAS_ALUMNOS.ID_ALUMNO;

--PODEMOS UNIR AHORA UNA SEGUNDA TABLA
SELECT *FROM ALUMNO
INNER JOIN CARRERAS_ALUMNOS 
ON ALUMNO.ID_ALUMNO= CARRERAS_ALUMNOS.ID_ALUMNO
INNER JOIN CARRERAS 
ON CARRERAS_ALUMNOS.ID_CARRERA=CARRERAS.ID_CARRERA;

--PODEMOS IDENTIFICAR LAS TABLAS CON ALIAS 
SELECT*FROM ALUMNO A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ID_ALUMNO=CA.ID_ALUMNO
INNER JOIN CARRERAS C
ON CA.ID_CARRERA=C.ID_CARRERA;

--CON LOS ALIAS ES MAS FACIL SELECIONAR REGISTROS DE LAS TABLAS
SELECT A.ID_ALUMNO,A.NOMBRE,C.NOMBRE FROM ALUMNO A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ID_ALUMNO=CA.ID_ALUMNO
INNER JOIN CARRERAS C
ON CA.ID_CARRERA=C.ID_CARRERA;
COMMIT;
--*****************************************************************************

--REVISANDO LA CONSULTA LEFT JOIN (PRIORIDAD TABLA IZQUIERDA)
--PRIORIZA LA INFORMACION DE LA TABLA A SOBRE LA TABLA B
--SE LE DA PRFERENCIA A LAS FILAS DE LA TABLA A, MUESTRA TODO AUNQUE
--HAYA MENOS FILAS EN LA TABLA B
SELECT*FROM ALUMNO
LEFT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO= CARRERAS_ALUMNOS.ID_ALUMNO;

--REVISANDO LA CONSULTA CON RIGHT JOIN 
--REVISANDO LA CONSULTA RIGHT JOIN (PRIORIDAD TABLA DERECHA)
SELECT*FROM ALUMNO
RIGHT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO= CARRERAS_ALUMNOS.ID_ALUMNO;

--FULL OUTER JOIN (MUESTRA TODO LOS DATOS DE AMBAS TABLAS UNIDAS)
SELECT*FROM ALUMNO
FULL OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO= CARRERAS_ALUMNOS.ID_ALUMNO;

--O FULL JOIN
SELECT*FROM ALUMNO
FULL OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO= CARRERAS_ALUMNOS.ID_ALUMNO;

--*****************************************************************************

--RESOLVIENDO EL EJERCICIO ANTERIOR CON JOINS 
SELECT * FROM PATRON
INNER JOIN SALIDAS 
ON PATRON.ID_PATRON=SALIDAS.ID_PATRON
INNER JOIN SOCIOS_BARCO 
ON SOCIOS_BARCO.ID_BARCO=SALIDAS.ID_BARCO
WHERE SOCIOS_BARCO.ID_SOCIO=1;

SELECT P.NOMBRE, P.ID_PATRON, S.ID_BARCO,
P.DIRECCION, P.TELEFONO,SO.ID_SOCIO,SO.NOMBRE,
S.FECHA_SALIDA FROM PATRON P
INNER JOIN SALIDAS S
ON P.ID_PATRON=S.ID_PATRON
INNER JOIN SOCIOS_BARCO SB
ON SB.ID_BARCO=S.ID_BARCO
INNER JOIN SOCIO SO
ON SB.ID_SOCIO=SO.ID_SOCIO
WHERE SB.ID_SOCIO=1;

COMMIT;
--*****************************************************************************
