-- Con dos guiones medios podemos escribir un comentario
-- Ctrl + S para guardar los cambios en el Script
/*
Comentarios de 
múltiples líneas:

SQL - Lenguaje de consulta estructurado - (Structured Query Language)
Es un lenguaje para actualizar, obtener y calcular información en
bases de datos relacionales.

Base de datos - conjunto de datos organizados entre sí, y que son
almacenados en tablas.
*/

-- La estructura de las tablas queda casi siempre de la siguiente manera:
-- Toda tabla debe llevar llave primaria, cada registro es identificado
-- por una llave primaria (primary key, ID)
-- Puede llevar también llave foránea
-- Tipo de datos (caracteres, numéricos, tipo fecha, etc.)

-- NUMBER - Datos numéricos
-- NVARCHAR2 - Permite entrada de datos en tipo caracter y alfanuméricos
-- NVARCHAR2 tiene la particularidad de liberar espacio de memoria
-- Por ejemplo, podemos tener un dato declarado con 30 caracteres, pero sino
-- se utilizan esos 30 caracteres, ese espacio es liberado.
--DATE - Utilizados para manejo de fecha y hora.

-- DDL - Data Definition Language-> Creación de tablas y estructuras
-- DML - Data Manipulation Language -> Creación de registros y manipulación
-- de los mismos registros.

-- Sentencia para la creación de tablas
-- Vamos a crear una tabla de alumnos

-- Nombre, apellidos, matrícula.
-- La información debe estar correctamente definida o atomizada.
-- Fecha de nacimiento
-- Sexo o género
-- Grado de estudios
-- CURP
-- Status (activo o inactivo)

-- Recomiendo ampliamente el uso de mayúsculas,

CREATE TABLE ALUMNO(
ID_ALUMNO NUMBER PRIMARY KEY, 
NOMBRE NVARCHAR2(30),
FECHANAC DATE,
GENERO NVARCHAR2 (10),
CURP NVARCHAR2 (18),
GRADO NVARCHAR2 (20),
STATUS NUMBER
); --Sentencia

-- Para ver la estructura de mi tabla mediante comandos o
-- sentencias se utiliza describe nombre de la tabla;

DESCRIBE ALUMNO;

-- CREAR UNA TABLA CON CARRERAS O LICENCIATURAS PARA LOS ALUMNOS

CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
AREA NVARCHAR2 (30),
DURACION NUMBER,
NUM_MATERIAS NUMBER
);

DESCRIBE CARRERAS;

-- SI QUIERO CAMBIAR EL NOMBRE
-- RENOMBRAR UNA COLUMNA EN UNA TABLA
ALTER TABLE CARRERAS RENAME COLUMN NUM_MATERIAS TO MATERIAS;

-- MODIFICAR EL TIPO DE DATO EN LA COLUMNA (FUNCIONA SIEMPRE Y CUANDO
-- NO SE TENGAN DATOS EN LA COLUMNA)

ALTER TABLE CARRERAS MODIFY DURACION NVARCHAR2(20);
DESCRIBE CARRERAS;

-- PARA RELACIONAR DATOS, POR EJEMPLO AQUI RELACIONAR A CADA ALUMNO
-- CON LA CARRERA A LA CUAL PERTENECE
-- ES MAS FÁCIL CREAR UNA TABLA Y ESTABLECER ESA RELACION

-- CREAR UNA TABLA LLAMADA CARRERAS_ALUMNOS

CREATE TABLE CARRERAS_ALUMNOS(
ID_CA NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_CARRERA NUMBER
);

-- CREANDO RESTRICCIONES EN NUESTRAS TABLAS
-- LAS IDENTIFICAMOS POR EL COMANDO CONSTRAINT
-- AGREGANDO UNA RESTRICCION DE LLAVE FORANEA
-- FK_ID_ALUMNO ES EL NOMBRE QUE YO QUIERA
ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO
FOREIGN KEY (ID_ALUMNO) -- EN QUÉ COLUMNA VAMOS A RECIBIR EL DATO
REFERENCES ALUMNO (ID_ALUMNO); --DE DÓNDE VIENE (TABLA Y QUE COLUMNA)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA
FOREIGN KEY (ID_CARRERA) 
REFERENCES CARRERAS (ID_CARRERA);

-- PODEMOS ESTABLECER UNA RESTRICCION RESPECTO A LO QUE QUEREMOS
-- ESCRIBIR EN UNA DETERMINADA COLUMNA
-- POR EJEMPLO EN LA TABLA ALUMNO UNICAMENTE ESCRIBIR EN LA COLUMNA DE GÉNERO
-- QUE SEA SOLO "MASCULINO" O "FEMENINO"
ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_GENERO
CHECK (GENERO IN('MASCULINO', 'FEMENINO'));

-- SENTENCIA PARA ELIMINAR UNA RESTRICCION, AQUI NO LE DI CTRL + ENTER
ALTER TABLE ALUMNO DROP CONSTRAINT CHECK_GENERO;

-- AQUI ESTA LA SENTENCIA PARA ELIMINAR LA RESTR DE FK PERO NO LE DI EJECUTAR
ALTER TABLE CARRERAS_ALUMNOS DROP CONSTRAINT FK_ID_CARRERAS;

-- CREAR UNA RESTRICCION PARA NOMBRES UNICOS O REGISTROS UNICOS
-- POR EJEMPLO, EN LA TABLA CARRERAS, TENEMOS NOMBRES DE LICENCIATURAS
-- Y PUES ESTOS NO PUEDEN SER LOS MISMOS Y REPETIRSE
ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE (NOMBRE);

-- INSERCIÓN DE DATOS EN NUESTRAS TABLAS
-- INSERTAR DATOS EN LA TABLA ALUMNO

DESCRIBE ALUMNO;

-- CONSULTAR EL FORMATO DE FECHA DE MI SISTEMA
SELECT SYSDATE FROM DUAL;

INSERT INTO ALUMNO VALUES
(1,'ESMERALDA','05/09/1990','FEMENINO','ESM900905MDF','8VO SEMESTRE',1); --1 QUE ESTÁ ACTIVO

INSERT INTO ALUMNO VALUES
(2,'OSCAR','05/09/1990','MASCULINO','OSC900905MDF','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(3,'RAFAEL','15/09/1990','MASCULINO','RAF900905MDF','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(4,'EDUARDO','13/01/1997','MASCULINO','EDU900905MDF','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(5,'BENIGNO','30/10/1986','MASCULINO','BEN900905MDF','8VO SEMESTRE',1);

-- REALIZAR UNA CONSULTA GENERAL DE LOS DATOS DE UNA TABLA
SELECT * FROM ALUMNO;

-- ACTUALIZAR UN DATO EN UN REGISTRO DETERMINADO
UPDATE ALUMNO SET FECHANAC = '14/02/1982' WHERE ID_ALUMNO=2;

UPDATE ALUMNO SET CURP = 'OSC820214HDF' WHERE ID_ALUMNO=2;

-- REALIZAR UNA CONSULTA DE COLUMNAS ESPECÍFICAS
SELECT NOMBRE FROM ALUMNO;
SELECT ID_ALUMNO,NOMBRE FROM ALUMNO;

-- CONSULTANDO UN REGISTRO DETERMINADO
SELECT * FROM ALUMNO WHERE NOMBRE = 'ESMERALDA';
SELECT * FROM ALUMNO WHERE ID_ALUMNO = '5';

-- COMO BORRAR UN REGISTRO ESPECÍFICO DE UNA TABLA, AQUI SOLO ERA PARA EVIDENCIAR
DELETE FROM ALUMNO WHERE ID_ALUMNO=5;

-- PARA CONFIRMAR CAMBIOS EN LOS REGISTROS INSERTADOS
COMMIT;

-- INSERTAR REGISTROS EN NUESTRA TABLA DE CARRERAS
DESCRIBE CARRERAS;

INSERT INTO CARRERAS VALUES
(1,'INGENIERIA EN SISTEMAS', 'EXACTAS','8 SEMESTRES', 50);
INSERT INTO CARRERAS VALUES
(2,'MEDICINAS', 'BIOLOGICAS','10 SEMESTRES', 90);
INSERT INTO CARRERAS VALUES
(3,'NUTRICION', 'BIOLOGICAS','8 SEMESTRES', 50);
INSERT INTO CARRERAS VALUES
(4,'DERECHO', 'HUMANIDADES','8 SEMESTRES', 55);
INSERT INTO CARRERAS VALUES
(5,'MERCADOTECNIA', 'ECONOMIA','8 SEMESTRES', 60);

SELECT * FROM CARRERAS;

-- YA QUE TENEMOS INFORMACION EN NUESTRAS DOS PRIMERAS TABLAS
-- QUE SON ENTIDADES FUERTES
-- PODEMOS AHORA SÍ LLENAR O RELACIONAR LOS DATOS EN LA TABLA DE
-- CARRERAS_ALUMNOS

-- INSERTANDO DATOS EN LA TABLA CARRERAS ALUMNOS
DESCRIBE CARRERAS_ALUMNOS;
INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,5);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,4);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,3,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (4,4,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (5,5,1);

SELECT * FROM CARRERAS_ALUMNOS;

COMMIT;

--AGREGAR UNA COLUMNA A UNA TABLA
DESCRIBE CARRERAS;

ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER(8,2);

SELECT * FROM CARRERAS;

-- ACTUALIZAR UN VALOR DE UN REGISTRO
UPDATE CARRERAS SET PRESUPUESTO=200000.99 WHERE ID_CARRERA=2;

SELECT * FROM CARRERAS;

-- ELIMINAR UNA COLUMNA
ALTER TABLE CARRERAS DROP COLUMN PRESUPUESTO;

-- BORRAR UN REGISTRO (FILA) QUE ESTÉ RELACIONADO A OTRO NO SE PUEDE

SELECT * FROM CARRERAS;

--EJERCICIO 1 
-- CREAR UNA TABLA QUE SE LLAME TUTORES
-- LA TABLA DEBE LLEVAR LAS SIGUIENTES COLUMNAS
-- ID DEL TUTOR (ID_TUTOR)
--NOMBRE
-- TELEFONO
-- DIRECCION
-- CLAVE DEL TUTOR (RE ESTRICCION DE QUE LA CLAVE SOLO PUEDA SER A,B,C,D

--CREAN UNA TABLA RELACIONAL QUE SE LLAME
-- ALUMNOS_TUTORES
--LLEVARÍA 3 COLUMNAS
-- ID DE LA TABLA
-- ID DEL ALUMNO
-- ID DEL TUTOR
-- CREAN SUS RESPECTIVAS LLAVES FORANEAS
-- CADA TABLA CO MINIMO 5 REGISTROS

-- CREANDO TABLA TUTORES
CREATE TABLE TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
TELEFONO NUMBER, --AQUI DEBEMOS DE PONERLO POR NVARCHAR2(10)
DIRECCION NVARCHAR2 (40),
CLAVE_TUTOR NVARCHAR2(1)
);

ALTER TABLE TUTORES ADD CONSTRAINT CHECK_CLAVE_TUTOR
CHECK (CLAVE_TUTOR IN('A', 'B','C','D'));

DESCRIBE TUTORES;
 
INSERT INTO TUTORES VALUES
(1,'ALEX BRAVO','7445462839','PASEO DE LA CAÑADA, PUEBLA','A');
INSERT INTO TUTORES VALUES
(2,'RAFAEL TAJA','7415442839','REFORMA, MEXICO','B');
 INSERT INTO TUTORES VALUES
(3,'MERLINA LOPEZ','2225462839','CALZADA, ACAPULCO','C');
INSERT INTO TUTORES VALUES
(4,'GABY DIAZ','7441462139','ARCO, CUERNAVACA','A');
INSERT INTO TUTORES VALUES
(5,'RAUL ALVAREZ','7441549366','SILVESTRE CASTRO, ACAPULCO','D');

CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER
);

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_CARRERAALUMNO 
FOREIGN KEY (ID_ALUMNO) -- EN QUÉ COLUMNA VAMOS A RECIBIR EL DATO
REFERENCES ALUMNO (ID_ALUMNO); --DE DÓNDE VIENE (TABLA Y QUE COLUMNA)

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_CARRERATUTOR
FOREIGN KEY (ID_TUTOR) 
REFERENCES TUTORES (ID_TUTOR);

DESCRIBE ALUMNOS_TUTORES;
INSERT INTO ALUMNOS_TUTORES VALUES (1,1,5);
INSERT INTO ALUMNOS_TUTORES VALUES (2,2,3);
INSERT INTO ALUMNOS_TUTORES VALUES (3,3,2);
INSERT INTO ALUMNOS_TUTORES VALUES (4,4,1);
INSERT INTO ALUMNOS_TUTORES VALUES (5,5,4);

ALTER TABLE TUTORES MODIFY TELEFONO NVARCHAR2(10); --CAMBIA EL DATO DEL TELEFONO A DATO
-- PERO NO PUDE PORQUE YA ESTA RELACIONADA

SELECT * FROM ALUMNOS_TUTORES;

SELECT * FROM TUTORES;
COMMIT;

-- TAREA: CREAR UNA TABLA QUE SE LLAME PADRES

CREATE TABLE PADRES(
ID_PADRES NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2 (10),
GENERO NVARCHAR2 (10)
);

ALTER TABLE PADRES ADD CONSTRAINT CHK_MASOFEM
CHECK (GENERO IN ('MASCULINO','FEMENINO'));

CREATE TABLE PADRES_ALUMNOS(
ID_PA NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_PADRE NUMBER
);

ALTER TABLE PADRES_ALUMNOS ADD CONSTRAINT FK_ALUM
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO);

ALTER TABLE PADRES_ALUMNOS ADD CONSTRAINT FK_PAD
FOREIGN KEY (ID_PADRE)
REFERENCES PADRES (ID_PADRES);

COMMIT;

DESCRIBE PADRES;

INSERT INTO PADRES VALUES
(1,'ALFONSO GAONA','ACAPULCO, GRO.','7441549396','MASCULINO');
INSERT INTO PADRES VALUES
(2,'REYNA GARCIA','MEXICO, CDMX.','7141589396','FEMENINO');
INSERT INTO PADRES VALUES
(3,'DAVID RAMIREZ','PUEBLA','7441549326','MASCULINO');
INSERT INTO PADRES VALUES
(4,'TANIA MARTINEZ','VERACRUZ','7341549396','FEMENINO');
INSERT INTO PADRES VALUES
(5,'DANAH MONTELONGO','MORELIA','7241549396','FEMENINO');

INSERT INTO PADRES_ALUMNOS VALUES (1,1,2);
INSERT INTO PADRES_ALUMNOS VALUES (2,2,3);
INSERT INTO PADRES_ALUMNOS VALUES (3,3,5);
INSERT INTO PADRES_ALUMNOS VALUES (4,4,1);
INSERT INTO PADRES_ALUMNOS VALUES (5,5,4);

COMMIT;

SELECT * FROM PADRES_ALUMNOS;

-- SECUENCIAS
-- CREANDO SECUENCIAS
-- SE EMPLEAN PARA GENERAR VALORES DE NÚMEROS ENTEROS
-- DE PREFERENCIA SON CONSECUTIVOS (INCREMENTO DE 1 EN 1)
-- O PUEDEN SER CON UN INCREMENTO QUE NOSOTROS NECESITEMOS
-- 1001, 1002... o 1,2,3
-- SE UTILIZAN PARA GENERAR LAS LLAVES PRIMARIAS Y ASÍ 
-- ASEGURARNOS QUE LOS VALORES NO SE REPITAN. 

--POR ESO VAMOS A EMPEZAR DEL NÚMERO 6 PORQUE YA TENEMOS DEL 1 AL 5

-- CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES

CREATE SEQUENCE ALUMNO_SEQ -- CREAMOS LA SECUENCIA Y SU NOMBRE
START WITH 6 -- EL VALOR A PARTIR DEL CUÁL INICIA LA SECUENCIA
INCREMENT BY 1 -- INCREMENTA EL VALOR COMO SE LE INDIQUE
MAXVALUE 999 -- INDICAMOS EL VALOR MÁXIMO HASTA EL QUE LLEGA LA SECUENCIA
MINVALUE 1 --INDICAMOS EL VALOR MÍNIMO DE LA SECUENCIA
NOCYCLE; -- INDICAMOS SI LA SECUENCIA UNA VEZ FINALIZADA SE CICLE (CYCLE)
-- O NO SE CICLE ENTONCES POR ESO ES NOCYCLE.

-- PARA ELIMINAR UNA SECUENCIA, SOLO PARA EJEMPLIFICAR
DROP SEQUENCE ALUMNO_SEQ;

-- CREAR UNA SECUENCIA CON VALORES POR DEFECTO (PARA TABLAS DE NUEVA CREACIÓN
CREATE SEQUENCE TUTORES_SEQ;

-- TRIGGER O DISPARADOR - EJECUTAR UNA ACCIÓN O DESENCADENAR UN EVENTO
CREATE TRIGGER INSERT_IDALUMNO
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL;
END;

-- YA QUE ESTÉ CREADO AHORA SI SE AUTOMATIZARÁN LOS NÚMEROS
-- INTENTANDO HACER UNA NUEVA INSERCIÓN EN LA TABLA ALUMNO
DESCRIBE ALUMNO;
INSERT INTO ALUMNO VALUES
(1,'ALEJANDRO','24/11/1985','MASCULINO','BARJ851124HVZ', '8VO SEMESTRE',1);

SELECT * FROM ALUMNO;

-- CREANDO EL TRIGGER PARA LA TABLA TUTORES
CREATE TRIGGER INSERT_IDTUTORES
BEFORE INSERT ON TUTORES FOR EACH ROW BEGIN
SELECT TUTORES_SEQ.NEXTVAL INTO:NEW.ID_TUTOR FROM DUAL;
END;

DESCRIBE TUTORES;
INSERT INTO TUTORES VALUES --AQUI COMO HABÍAMOS PUESTO POR DEFAULT POR ESO LE 
--DIMOS EJECUTAR HASTA QUE YA LO DEJEN
(1,'MARIELA',7445669300,'PUEBLA','B');

COMMIT;

-- OTRA FORMA DE INSERCIÓN  - INSERCIÓN MASIVA
INSERT ALL
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS) VALUES
('PEDRO','18/01/1997','MASCULINO','PEDR8906712','8VO SEMESTRE',1)
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS) VALUES
('PABLO','18/01/1997','MASCULINO','PABL8906712','7VO SEMESTRE',1)
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS) VALUES
('HUGO','18/01/1997','MASCULINO','HUG8906712','8VO SEMESTRE',1)
SELECT*FROM DUAL;

-- EJERCICIO 1 -- ASUNTOS

CREATE TABLE ASUNTOS(
ID_ASUNTO NUMBER PRIMARY KEY,
FECHA_INICIO DATE,
FECHA_FIN DATE,
ESTADO NVARCHAR2 (15)
);

ALTER TABLE ASUNTOS ADD CONSTRAINT CHK_ESTADO
CHECK (ESTADO IN ('TRAMITE','ARCHIVADO','FINALIZADO'));

CREATE TABLE CLIENTES(
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(20),
DIRECCION NVARCHAR2(20),
TELEFONO NVARCHAR2(10),
CURP NVARCHAR2 (18)
);

CREATE TABLE PROCURADORES(
ID_PROCURADOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(20),
DIRECCION NVARCHAR2(20),
TELEFONO NVARCHAR2(10),
CURP NVARCHAR2 (18)
);

CREATE TABLE ASUNTO_CLIENTE_PROC(--CHECAR SI PROCEDE ESTA QUE ES POR LA QUE ME FUI
ID_ACP NUMBER PRIMARY KEY,
ID_ASUNTO NUMBER,
ID_CLIENTE NUMBER,
ID_PROCURADOR NUMBER
);

CREATE SEQUENCE ASUNTOS_SEQ;
CREATE TRIGGER INSERT_IDASUNTO
BEFORE INSERT ON ASUNTOS FOR EACH ROW BEGIN
SELECT ASUNTOS_SEQ.NEXTVAL INTO:NEW.ID_ASUNTO FROM DUAL;
END;

CREATE SEQUENCE CLIENTES_SEQ;
CREATE TRIGGER INSERT_IDCLIENTE
BEFORE INSERT ON CLIENTES FOR EACH ROW BEGIN
SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

CREATE SEQUENCE PROCURADORES_SEQ;
CREATE TRIGGER INSERT_IDPROCURADOR
BEFORE INSERT ON PROCURADORES FOR EACH ROW BEGIN
SELECT PROCURADORES_SEQ.NEXTVAL INTO:NEW.ID_PROCURADOR FROM DUAL;
END;

CREATE SEQUENCE ACP_SEQ;
CREATE TRIGGER INSERT_IDACP
BEFORE INSERT ON ASUNTO_CLIENTE_PROC FOR EACH ROW BEGIN
SELECT ACP_SEQ.NEXTVAL INTO:NEW.ID_ACP FROM DUAL;
END;

ALTER TABLE ASUNTO_CLIENTE_PROC ADD CONSTRAINT FK_IDASUNTO
FOREIGN KEY (ID_ASUNTO)
REFERENCES ASUNTOS (ID_ASUNTO);

ALTER TABLE ASUNTO_CLIENTE_PROC ADD CONSTRAINT FK_IDCLIENTE
FOREIGN KEY (ID_CLIENTE)
REFERENCES CLIENTES (ID_CLIENTE);

ALTER TABLE ASUNTO_CLIENTE_PROC ADD CONSTRAINT FK_IDPROCURADOR
FOREIGN KEY (ID_PROCURADOR)
REFERENCES PROCURADORES (ID_PROCURADOR);

INSERT ALL
INTO ASUNTOS (FECHA_INICIO,FECHA_FIN,ESTADO) VALUES
('04/04/2002','10/01/2023','FINALIZADO')
INTO ASUNTOS (FECHA_INICIO,FECHA_FIN,ESTADO) VALUES
('05/09/2018','15/06/2023','TRAMITE')
INTO ASUNTOS (FECHA_INICIO,FECHA_FIN,ESTADO) VALUES
('01/01/2020','30/05/2023','ARCHIVADO')
SELECT*FROM DUAL;

INSERT ALL 
INTO CLIENTES (NOMBRE,DIRECCION,TELEFONO,CURP) VALUES
('LLUVIA','HIDALGO','2314589021','LLU900523JLO')
INTO CLIENTES (NOMBRE,DIRECCION,TELEFONO,CURP) VALUES
('MARIEL','MEXICO','9314549021','MAR850222TKO')
INTO CLIENTES (NOMBRE,DIRECCION,TELEFONO,CURP) VALUES
('DANIEL','SONORA','1314439021','LLU990905SKO')
SELECT*FROM DUAL;

INSERT ALL 
INTO PROCURADORES (NOMBRE,DIRECCION,TELEFONO,CURP) VALUES
('GEORGINA','GUERRERO','5554589021','GEO900423JYO')
INTO PROCURADORES (NOMBRE,DIRECCION,TELEFONO,CURP) VALUES
('FEDERICO','MORELOS','2224549021','FED850322TMO')
INTO PROCURADORES (NOMBRE,DIRECCION,TELEFONO,CURP) VALUES
('ROMUALDO','CUERNAVACA','8994439021','ROM990105SJO')
SELECT*FROM DUAL;

INSERT ALL
INTO ASUNTO_CLIENTE_PROC (ID_ASUNTO,ID_CLIENTE,ID_PROCURADOR) VALUES (1,1,2)
INTO ASUNTO_CLIENTE_PROC (ID_ASUNTO,ID_CLIENTE,ID_PROCURADOR) VALUES (2,2,3)
INTO ASUNTO_CLIENTE_PROC (ID_ASUNTO,ID_CLIENTE,ID_PROCURADOR) VALUES (3,3,1)
SELECT*FROM DUAL;

COMMIT;

SELECT*FROM ASUNTO_CLIENTE_PROC;

--EJERCICIO 3 --BARCOS -- CLUB NAUTICO

CREATE TABLE SOCIO(
ID_SOCIO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE SOCIO_SEQ;

CREATE TRIGGER INSERT_SOCIO
BEFORE INSERT ON SOCIO FOR EACH ROW BEGIN
SELECT SOCIO_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL;
END;

CREATE TABLE BARCO(
ID_BARCO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
NUM_AMARRE NUMBER,
CUOTA NUMBER(8,2)
);

CREATE SEQUENCE BARCO_SEQ;

CREATE TRIGGER INSERT_BARCO
BEFORE INSERT ON BARCO FOR EACH ROW BEGIN
SELECT BARCO_SEQ.NEXTVAL INTO:NEW.ID_BARCO FROM DUAL;
END;

CREATE TABLE PATRON(
ID_PATRON NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE PATRON_SEQ;

CREATE TRIGGER INSERT_PATRON
BEFORE INSERT ON PATRON FOR EACH ROW BEGIN
SELECT PATRON_SEQ.NEXTVAL INTO:NEW.ID_PATRON FROM DUAL;
END;

COMMIT;

CREATE TABLE SOCIOS_BARCO(
ID_SB NUMBER PRIMARY KEY,
ID_SOCIO NUMBER,
ID_BARCO NUMBER,
CONSTRAINT FK_ID_SOCIO
FOREIGN KEY (ID_SOCIO)
REFERENCES SOCIO(ID_SOCIO),
CONSTRAINT FK_ID_BARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO)
);

CREATE SEQUENCE SOCIOSBARCO_SEQ;

CREATE TRIGGER INSERT_SOCIOSBARCO
BEFORE INSERT ON SOCIOS_BARCO FOR EACH ROW BEGIN
SELECT SOCIOSBARCO_SEQ.NEXTVAL INTO:NEW.ID_SB FROM DUAL;
END;

CREATE TABLE SALIDAS(
ID_SALIDA NUMBER PRIMARY KEY,
DESTINO NVARCHAR2(30),
FECHASALIDA DATE,
ID_BARCO NUMBER,
ID_PATRON NUMBER,
CONSTRAINT FK_IDBARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO),
CONSTRAINT FK_IDPATRON
FOREIGN KEY (ID_PATRON)
REFERENCES PATRON(ID_PATRON)
);

CREATE SEQUENCE SALIDASBARCO_SEQ;

CREATE TRIGGER INSERT_SALIDASBARCO
BEFORE INSERT ON SALIDAS FOR EACH ROW BEGIN
SELECT SALIDASBARCO_SEQ.NEXTVAL INTO:NEW.ID_SALIDA FROM DUAL;
END;

COMMIT;

-- INSERTAR DATOS EN NUESTRAS TABLAS
INSERT ALL
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ESMERALDA','ACAPULCO','7445462837')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('JOSE DAVID','CHIAPAS','9611234587')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('JONATHAN','CHIAPAS','9611224547')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ANTONIO','EDO MEX','5551254587')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALEX','EDO MEX','5551134587')
SELECT*FROM DUAL;

INSERT ALL
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN PABLO',' MORELOS','7771462837')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('MARICELA','EDO MEX','5576234587')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALFONSO','EDO MEX','5611224547')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN OSMAR','VERACRUZ','2291254567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('RAFAEL','QUERETARO','4421134587')
SELECT*FROM DUAL;

INSERT ALL
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA NIÑA',101,1200.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA PINTA',102,1800.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA SANTA MARIA',103,2000.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('PERLA NEGRA',104,5500.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('EL HOLANDES',105,3200.50)
SELECT*FROM DUAL;

INSERT ALL
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (1,5)
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (2,4)
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (3,1)
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (4,2)
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (5,1)
SELECT*FROM DUAL;

COMMIT;

INSERT ALL
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON) 
VALUES ('VERACRUZ',TO_DATE('16/06/2023 08:00:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON) 
VALUES ('VILLAHERMOSA',TO_DATE('17/06/2023 08:30:00','DD-MM-YYYY HH24:MI:SS'),2,2)
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON) 
VALUES ('CAMPECHE',TO_DATE('18/06/2023 09:00:00','DD-MM-YYYY HH24:MI:SS'),3,3)
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON) 
VALUES ('YUCATAN',TO_DATE('19/06/2023 08:40:00','DD-MM-YYYY HH24:MI:SS'),4,4)
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON) 
VALUES ('CANCUN',TO_DATE('20/06/2023 10:00:00','DD-MM-YYYY HH24:MI:SS'),5,5)
SELECT*FROM DUAL;

--CONSULTAR HORA Y FECHA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA, 'DD-MM-YYYY HH24:MI:SS') FROM SALIDAS;

--CONSULTAR UNICAMENTE HORARIO DE SALIDA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA, 'HH24:MI:SS') FROM SALIDAS;

-- LA SENTENCIA PARA BORRAR REGISTROS ES CON
-- DELETE FROM
DELETE FROM SALIDAS WHERE ID_SALIDA=5;

-- EXISTE UN COMANDO QUE NOS PERMITE REGRESAR AL ESTADO DEL ÚLTIMO COMMIT
-- ESTO SE LOGRA EN CASO DE LA INSERCIÓN, BORRADO O ACTUALIZADO DE DATOS
ROLLBACK;

-- LAS TABLAS FUERTES NO SE PUEDEN ELIMINAR CUANDO ESTÁN LIGADAS A OTRO.

SELECT*FROM SALIDAS;

-- CONSULTAS CON COLUMNAS ESPECIFICAS
SELECT ID_SALIDA, DESTINO FROM SALIDAS;

--REALIZANDO UNA CONSULTA CON ALGUNA CONDICION
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA>3000;

--REALIZAR UNA CONSULTA CON MÁS CONDICIONES
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA>3000 AND NOMBRE='PERLA NEGRA';

-- REALIZAMOS UN CONSULTA PARA BUSCAR RANGOS
SELECT*FROM BARCO WHERE CUOTA BETWEEN 1000 AND 3000;

SELECT*FROM ALUMNO;
--BORRADO DE REGISTROS CON NOMBRE
DELETE FROM ALUMNO WHERE NOMBRE='ALEJANDRO';

-- BUSCAR VALORES SIMILARES
SELECT*FROM ALUMNO WHERE NOMBRE LIKE 'E%';
SELECT*FROM ALUMNO WHERE NOMBRE LIKE '%O';

--CONSULTA CON FUNCIONES DE VALORES MAXIMOS Y MINIMOS
SELECT MAX(CUOTA) FROM BARCO;
SELECT MIN(CUOTA) FROM BARCO;

-- BUSCAR O CONSULTAR EL BARCO CON MAYOR CUOTA (FUNCIONES DE AGREGACION)
SELECT*FROM BARCO WHERE CUOTA=(SELECT MAX(CUOTA) FROM BARCO);
--SELECT*FROM BARCO WHERE CUOTA=5500.50; --ES EL MISMO

--REALIZAR UN CONTEO DE FILAS PARA DETERMINAR DATOS
SELECT COUNT (ID_BARCO) FROM BARCO WHERE CUOTA<3000;

-- OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (CUOTA) FROM BARCO;

-- REALIZAR SUMATORIA DE VALORES DE UNA COLUMNA
SELECT SUM(CUOTA) FROM BARCO;

-- FUNCIONES GROUP BY -- ENTREVISTA
-- REALIZAR UN CONTEO DE ALUMNOS Y AGRUPAR CUANTOS HAY POR GENERO
SELECT COUNT (ID_ALUMNO), GENERO FROM ALUMNO GROUP BY GENERO;

SELECT * FROM ALUMNO;

-- ORDENAR LOS REGISTROS POR ALGUNA COLUMNA, EN ESTE CASO POR LA COLUMNA
-- NOMBRE Y PODEMOS ORDENARLOS DE MANERA ASCENDENTE O DESCENDENTE
SELECT*FROM ALUMNO ORDER BY NOMBRE DESC; --DESCENDENTE
SELECT*FROM ALUMNO ORDER BY NOMBRE ASC; --ASCENDENTE

-- MOSTRAR EL TOTAL DE REGISTROS DE UNA TABLA
SELECT COUNT (ID_ALUMNO) FROM ALUMNO;

SELECT COUNT (ID_CA) FROM CARRERAS_ALUMNOS WHERE ID_CARRERA=1;

--CONTAR VARIOS IDS DUDA*
--SELECT COUNT (ID_ALUMNO) AS ALUMNOS, COUNT (ID_PATRON) AS PATRON FROM ALUMNOS, PATRON

-- EJERCICIO DE CONSULTA DE DATOS--
-- BUSCAR LOS DATOS DEL PATRON QUE HAYA ESTADO EN LA SALIDA CON EL 
-- BARCO PERTENECIENTE AL SOCIO 1

SELECT*FROM SOCIOS_BARCO WHERE ID_SOCIO=1; --ID BARCO ES 5
SELECT*FROM SALIDAS WHERE ID_BARCO=5; -- PATRON=5

SELECT*FROM PATRON WHERE ID_PATRON=5;

COMMIT;

-- PODRÍAMOS EJECUTAR BÚSQUEDAS POR SEPARADO Y POSTERIORMENTE UNIRLLAS PARA
-- LLEGAR AL RESULTADO FINAL. BUSCAMOS EL DATO DEL SOCIO 1, QUE BARCO LE PERTENECE

-- LA MANERA DE HACERLO ANIDADO:
SELECT * FROM PATRON 
WHERE ID_PATRON = 
(SELECT ID_PATRON FROM SALIDAS WHERE ID_BARCO =
(SELECT ID_BARCO FROM SOCIOS_BARCO WHERE ID_SOCIO= 1));

-- CONSULTAS CON JOINS:
-- INNER JOIN
-- SE MUESTRAN LOS REGISTROS QUE COINCIDEN DE UNA TABLA 'A' Y UNA TABLA 'B'
-- LA COINCIDENCIA SE DA GRACIAS AL DATO QUE COMPARTEN EN COMÚN, QUE EN ESTE
-- CASO SON NUESTRAS LLAVES PRIMARIAS Y LAS LLAVES FORÁNEAS.

-- FORMA EXPLÍCITA - INDICANDO LA SENTENCIA CON INNER JOIN O JOIN

-- VAMOS A UNIR LA TABLA DE ALUMNOS CON LA TABLA DE CARRERAS,
-- PERO RECURRIMOS A LA TABLA RELACIONAL.
SELECT*FROM ALUMNO;
SELECT*FROM CARRERAS;

-- PRIMERO UNIMOS LA TABLA DE ALUMNO CON LA DE CARRERAS ALUMNOS, PORQUE AHÍ TIENEN
-- UN CAMPO EN COMÚN, QUE ES EL ID_ALUMNO (LLAVE PRIMARIA EN LA TABLA ALUMNO
-- LLAVE FORÁNEA EN LA TABLA CARRERAS_ALUMNOS)
-- SOLO MUESTRA LAS FILAS COINCIDENTES
SELECT*FROM ALUMNO
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

-- PODEMOS UNIR AHORA LA SEGUNDA TABLA, QUE ES LA DE CARRERAS 
SELECT * FROM ALUMNO
INNER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO
INNER JOIN CARRERAS
ON CARRERAS_ALUMNOS.ID_CARRERA=CARRERAS.ID_CARRERA;

-- PODEMOS IDENTIFICAR LAS TABLAS CON ALIAS:
SELECT * FROM ALUMNO A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ID_ALUMNO = CA.ID_ALUMNO
INNER JOIN CARRERAS C
ON CA.ID_CARRERA=C.ID_CARRERA;

-- PODEMOS IDENTIFICAR LAS TABLAS CON ALIAS:
SELECT A.ID_ALUMNO, A.NOMBRE, C.NOMBRE FROM ALUMNO A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ID_ALUMNO = CA.ID_ALUMNO
INNER JOIN CARRERAS C
ON CA.ID_CARRERA=C.ID_CARRERA;

--REVISANDO LA CONSULTA CON LEFT JOIN, UNIR TABLA A CON B PERO DAN PREFERENCIA A LA A
-- PRIORIZA LA INFORMACIÓN DE LA TABLA A, SOBRE LA TABLA B
SELECT * FROM ALUMNO
LEFT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

--Y AHORA CON RIGHT JOIN FUNCIONA AL REVES, LA PRIORIDAD ES LA TABLA B Y NO SE 
--MUESTRAN DATOS DE NOMBRES PORQUE NO HAY DATOS EN LA TABLA B
SELECT * FROM ALUMNO
RIGHT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

--TENEMOS TAMBIÉN AL FULL OUTER JOIN, QUE MUESTRA TODO DE LAS TABLAS 
-- HAYA COINCIDENCIAS O NO.
SELECT * FROM ALUMNO
FULL OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

-- RESOLVIENDO EL EJERCICIO ANTERIOR CON JOINS

SELECT*FROM PATRON P
INNER JOIN SALIDAS S
ON P.ID_PATRON=S.ID_PATRON
INNER JOIN SOCIOS_BARCO SB
ON SB.ID_BARCO=S.ID_BARCO
WHERE ID_SOCIO=1;

-- SOLO PONIENDO LOS CAMPOS O DATOS QUE QUIERES
SELECT P.ID_PATRON, P.NOMBRE, P.DIRECCION, P.TELEFONO FROM PATRON P
INNER JOIN SALIDAS S
ON P.ID_PATRON=S.ID_PATRON
INNER JOIN SOCIOS_BARCO SB
ON SB.ID_BARCO=S.ID_BARCO
WHERE SB.ID_SOCIO=1;



