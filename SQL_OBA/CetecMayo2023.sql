-- con estos dos guiones poedemos escribir comentarios
-- Con dos guiones medios podemos escribir un comentario
-- CTRL + S para guardar los cambios en el Script

/*
Comentarios
de
multiples
lineas

SQL - Lenguaje de consulta estructurado - (Structured Query Language)
Es un lenguaje para actualizar, obtener y calcular información en 
bases de datos relacionales

Base de datos - conjunto de datos organizados entre sí, y que son almacenados
en tablas

*/

-- La estructura de las tablas queda casi siempre de la siguiente manera:
-- Toda tabla debe llevar llave primaria. Cada registro es identificado
-- por una llave primaria (primary key, ID)
-- Puede llevar también llave foranea FK
-- Tipo de datos (caracteres, numéricos, tipo fecha, etc)

-- NUMBER - Datos numéricos
-- NVARCHAR2 - Permite entrada de datos de tipo caracter y alafanumericos
-- NVARCHAR2 tiene la particularidad de liberar espacio de memoria
--Por ejemplo, podemos tener un dato declarado con 30 caracteres. Pero si no
-- se utilizan esos 30 caracteres, ese espacio es liberado.
--DATE - Utilizados para manejo de fecha y hora

-- DDL - Data Definition Language - Creación de tablas y estructuras
-- DML - Data Manipulation Language - Creación de registros y manipulación
-- de los mismos

-- SENTENCIA PARA LA CREACIÓN DE TABLAS
-- VAMOS A CREAR UNA TABLA DE ALUMNOS

-- NOMBRE, APELLIDO, MATRICULA
-- EDAD. LA INFORMACIÓN DEBE ESTAR CORRECTAMENTE DEFINIDA O ATOMIZADA.
-- FECHA DE NACIMIENTO
-- SEXO O GENERO
-- GRADO DE ESTUDIOS
-- CURP
-- STATUS (ACTIVO O INACTIVO)

--SE RECOMIENDA EL USO DE MAYUSCULAS

CREATE TABLE ALUMNO(          --CREAR TABLA ALUMNO
ID_ALUMNO NUMBER PRIMARY KEY, --CLAVE PTIMARIA
NOMBRE NVARCHAR2 (30),        --NOMBRE DE 30 CARACTERES NUMEROS O LETRAS
FECHANAC DATE,                -- PARA UNA FECHA    
GENERO NVARCHAR2(10),         -- MASC O FEME     
CURP NVARCHAR2(18),           --18 ESPACIOS PARA LA CURP
GRADO NVARCHAR2(20),          --20 ESPACIOS PARA EL GRADO
STATUS NUMBER                 --
);

--PARA VER LA ESTRUCTURA DE LA TABLA SE USA DESCRIBE NOMBRE DE LA TABLA
DESCRIBE ALUMNO;

--CREAR UNA TABLA CON CARRERAAS O LICENCIATURAS
CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
AREA NVARCHAR2 (30),
DURACION NUMBER,
NUMBER_MATERIAS NUMBER    ooooooooooooooooooooooooooooooooooooooooooooooo
);
DESCRIBE CARRERAS;

--RENOMBRAR UNA COLUMNA EN LA TABLA
ALTER TABLE CARRERAS RENAME COLUMN NUM_MATERIAS TO MATERIAS;

--MODIFICAR EL TIPO DE DATO EN LA COLUMNA SIEMPRE Y CUANDO  
--NO TENGA DATOS LA COLUMNA
ALTER TABLE CARRERAS MODIFY DURACION NVARCHAR2(20);

DESCRIBE CARRERAS;
--PARA RELACIONAR DATOS CON LA CARRERA A LA CUAL PERTENECE
--CREAR TABLA CRRERAS_ALUMNOS

CREATE TABLE CARRERAS_ALUMNOS(
ID_CA NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_CARRERA NUMBER
);

--CREANDO RESTRICCIONES EN LAS TABLAS
--AGREGANDO UNA RESTRICCION DE LLAVE FORANEA
ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO
FOREIGN KEY (ID_ALUMNO)--EN QUE COLUMNA VAMOS A RECIBIR LA LLAVE O DATO
REFERENCES ALUMNO (ID_ALUMNO);--DE DONDE VIENE(TABLA Y QUE COLUMNA)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA
FOREIGN KEY (ID_CARRERA)
REFERENCES CARRERAS (ID_CARRERA);
-- PODEMOS ESTABLECER UNA RESTRICCION RESPECTO A LO QUE QUEREMOS
-- ESCRIBIR EN UNA DETERMINADA COLUMNA
-- POR EJEMPLO EN LA TABLA ALUMNO UNICAMENTE ESCRIBIR EN LA 
-- COLUMNA DE GENERO QUE SEA SOLO 'MASCULINO' O 'FEMENINO'
ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_GENERO
CHECK (GENERO IN('MASCULINO','FEMENINO'));

--SENTENCIA PARA ELIMINAR UNA RESTRICCION
ALTER TABLE ALUMNO DROP CONSTRAINT CHECK_GENERO;

ALTER TABLE CARRERAS_ALUMNOS DROP CONSTRAINT FK_ID_CARRERA;

-- CREAR UNA RESTRICCIÓN PARA NOMBRES UNICOS O REGISTROS UNICOS
-- POR EJEMPLO, EN LA TABLA CARRERAS, TENEMOS NOMBRES DE LICENCIATURAS
-- Y PUES ESTOS NO PUEDEN SER LOS MISMOS O REPETIRSE

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE (NOMBRE);
--INSERCION DE DATOS EN NUESTRAS TABLAS
--INSERTAR DATOS EN LA TABLA
DESCRIBE ALUMNO;

--CONSULTAR FORMATO DE FECHA
SELECT SYSDATE FROM DUAL;

INSERT INTO ALUMNO VALUES
(1,'ESMERALDA','5/09/1990','FEMENINO','ESM289098765','80 SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(2,'OSCAR','5/09/1990','MASCULINO','ESM289098765','80 SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(3,'RAFAEL','5/09/1990','MASCULINO','ESM289098765','80 SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(4,'EDUARDO','5/09/1990','MASCULINO','ESM289098765','80 SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(5,'BENIGNO','5/09/1990','MASCULINO','ESM289098765','80 SEMESTRE',1);

--REALIZAR CONSULTA GENERAL DE LOS DATOS DE UNA TABLA
SELECT * FROM ALUMNO;

--ACTUALIZAR UN DATO EN UN REGISTRO DETERMINADO
UPDATE ALUMNO SET FECHANAC='14/02/1982' WHERE ID_ALUMNO=2;
UPDATE ALUMNO SET CURP='OBA23456714' WHERE ID_ALUMNO=2;

--REALIZAR UNA CONSULTA DE COLUMNAS ESPECIFICAS
SELECT NOMBRE FROM ALUMNO;
SELECT ID ALUMNO,NOMBRE FROM ALUMNO;

--CONSULTAR REGISTRO DETERMINADO
SELECT * FROM ALUMNO WHERE NOMBRE='ESMERALDA';

--COMO BORRAR UN REGISTRO ESPECIFICO
DELETE FROM ALUMNO WHERE ID_ALUMNO=5;

--PARA GUARDAR TODOS LOS REGISTROS 
COMMIT;

--INSERTAR REGISTROS EN TABLA CARRERAS
INSERT INTO CARRERAS VALUES
(1,'ING EN SISTEMAS','EXACTAS','8');
INSERT INTO CARRERAS VALUES
(2,'MEDICINA','BIOLOGICAS','10');
INSERT INTO CARRERAS VALUES
(3,'NUTRICION','BIOLOGICAS','8');
INSERT INTO CARRERAS VALUES
(4,'DERECHO','HUMANIDADES','8');
INSERT INTO CARRERAS VALUES
(5,'MERCADOTECNIA','ECONOMIA','8');

DESCRIBE CARRERAS;
SELECT * FROM CARRERAS;

--YA QUE TENEMOS INFORMACION EN LAS DOS ENTIDADES FUERTES
--PODEMOS YA RELACIONAR LOS DATOS EN LA TABLA DE CARRERAS_ALUMNOS
INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,5);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,4);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,3,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (4,4,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (5,5,1);
SELECT * FROM CARRERAS_ALUMNOS;
COMMIT;

CREATE SEQUENCE CARRERAS_SEQ;

CREATE TRIGGER INSERT_CARERAS
BEFORE INSERT ON CARRERAS FOR EACH ROW BEGIN
SELECT CARRERAS_SEQ.NEXTVAL INTO:NEW.ID_CARRERAS FROM DUAL;
END;
--agragar columna a tabla    OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER(8,2);
--ACTUALIZAR UN VALOR DE UN REGISTRO
UPDATE CARRERAS SET PRESUPUESTO=200000.99 WHERE ID_CARRERA=2;
DESCRIBE CARRERAS;
SELECT * FROM CARRERAS;
COMMIT;

--ELIMINAR COLUMNA          OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
ALTER TABLE CARRERAS DROP COLUMN PRESUPUESTO;
--alterar tabla con su nombre comando para borrar la columna y su nombre

SELECT * FROM CARRERAS;--para hacer consulta general

--EJ 1
--CREAR TABLA TUTORES
--CON LAS SIGUIENTES COLUMNAS
--ID DEL TUTOR (ID_TUTOR)
--NOMBRE
--TELEFONO
--DIRECCION
--CLAVE DEL TUTOR (RESTRICCION DE QUE LA CLAVE SOLO PUEDA SER A,B,C,D
--CREAR UNA TABLA RELACIONAL QUE SE LLAME
--ALUMNOS_TUTORES
--LLEVARIA 3 COLUMNAS
--ID DE LA TABLA (ID_TABLA)
--ID DEL ALUMNO (ID_ALUMNO)
--ID DEL TUTOR (ID_TUTOR)
--CREAR RESPECTIVAS LLAVES FORANEAS (FK)
--CADA TABLA CON MINIMO 5 REGISTROS

CREATE TABLE TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
TELEFONO NUMBER(10),
DIRECCION NVARCHAR2(200),
CLAVE_TUTOR NUMBER(10)
);   
ALTER TABLE TUTORES MODIFY CLAVE_TUTOR NVARCHAR2(1);
DESCRIBE TUTORES;
--ALTER TABLE TUTORES ADD CONSTRAINT FK_ID_TUTORES
--FOREIGN KEY (ID_TUTORES)
--REFERENCES TUTORES;

ALTER TABLE TUTORES ADD CONSTRAINT CHK_CLAVE_TUTOR
CHECK (CLAVE_TUTOR IN('A','B','C','D'));


CREATE TABLE ALUMNOS_TUTORES(
ID_TABLA NUMBER PRIMARY KEY,
ID_TUTORES NUMBER,
ID_ALUMNO NUMBER
);
DESCRIBE ALUMNOS_TUTORES;

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_TUTOR
FOREIGN KEY (ID_TUTORES)
REFERENCES TUTORES (ID_TUTOR);

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_ALUMNOT
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO);

DESCRIBE TUTORES;
INSERT INTO TUTORES VALUES
(1, 'JORGE', '2721976060','PUEBLA, PUE','A');
INSERT INTO TUTORES VALUES
(2, 'MARIA', '2721976060','VERACRUZ','A');
INSERT INTO TUTORES VALUES
(3, 'ALEJANDRO', '2721976060','MICHOACAN','A');
INSERT INTO TUTORES VALUES
(4, 'JOSE', '2721976060','HIDALGO','A');
INSERT INTO TUTORES VALUES
(5, 'ALBERTO', '2721976060','ZACATECAS','A');
DESCRIBE TUTORES;

INSERT INTO ALUMNOS_TUTORES VALUES (1,1,1);
INSERT INTO ALUMNOS_TUTORES VALUES (2,2,4);
INSERT INTO ALUMNOS_TUTORES VALUES (3,2,5);
INSERT INTO ALUMNOS_TUTORES VALUES (4,3,2);
INSERT INTO ALUMNOS_TUTORES VALUES (5,5,3);

INSERT INTO TUTORES VALUES
(6, 'ALBERTANO', '2721976060','ZACATECAS','D');

COMMIT;

--SECUENCIAS    CREANDO SECUENCIAS
--SE EMPLEAN PARA GENERAR VALORES ENTEROS NUMERICOS
--de preferencia son consecutivos de 1 en 1
--o incrementar como queramos o necesitemos
--para generar llaves primarias y asegurarnos que 
--estos valores no se repitan

CREATE SEQUENCE ALUMNO_SEQ --creamos secuencia y su nombre
START WITH 6 --valor donde inicia la secuencia
INCREMENT BY 1 --incrementa donde se especifique
MAXVALUE 999  --valor maximo
MINVALUE 1   --valor minimo de la secuencia
NOCYCLE;  --para que se cicle
                                      --
--ELIMINAR SECUENCIA.....   DROP SEQUENCE Y EL NOMBRE DE LA SECUENCIA
                                       --
--crear secuencia por defecto  CRETE SEQUENCE TUTORES_SEQ

--TRIGGER O DISPARADOR ...  ejecuta una accion o desencadena un evento
CREATE TRIGGER INSERT_ALUMNO
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL;
END;
DESCRIBE ALUMNO;
--INSERTANDO ALUMNO
INSERT INTO ALUMNO VALUES
(1,'ALEJANDRO','24/11/1985','MASCULINO','DGFAH4367335','80 SEMESTRE',1);

SELECT * FROM ALUMNO;
--OTRA FORMA DE INSERCION ... INSERCION MASIVA
INSERT ALL
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS) VALUES
('PEDRO','18/03/1990','MASCULINO','DGFT346478','80 SEMESTRE',1)
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS) VALUES
('PABLO','18/03/1990','MASCULINO','DGFT346478','80 SEMESTRE',1)
INTO ALUMNO (NOMBRE,FECHANAC,GENERO,CURP,GRADO,STATUS) VALUES
('HUGO','18/03/1990','MASCULINO','DGFT346478','80 SEMESTRE',1)
SELECT * FROM DUAL;   --SE SELECCIONA DESDE AQUI HASTA INSERT ALL 
                      --PARA EJECUTARLO
COMMIT;       

-- ejercicio de gabinete de abogados
CREATE TABLE PROCURADORES(
ID_PROCURADOR NVARCHAR2(10) PRIMARY KEY,
NOMBRE NVARCHAR2(20),
DIRECCION NVARCHAR2(50)
);

CREATE TABLE CLIENTES(
ID_CLIENTE NVARCHAR2(10) PRIMARY KEY,
NOMBRE NVARCHAR2(20),
DIRECCION NVARCHAR2(50)
);

CREATE TABLE ASUNTOS(
ID_ASUNTO NVARCHAR2(10) PRIMARY KEY
ESTADO NVARCHAR2(10),
FECHAINICIO DATE,
FECHAFINAL DATE
);
ALTER TABLE ASUNTOS ADD CONSTRAINT FK_ID_CLIENTE
FOREIGN KEY (ID_CLIENTE)
REFERENCES CLIENTES (ID_CLIENTE);

ALTER TABLE ASUNTOS ADD CONSTRAINT FK_ID_PROCURADOR
FOREIGN KEY (ID_CLIENTE)
REFERENCES PROCURADORES (ID_PROCURADOR);

CREATE TABLE ASUNTO_PROCURADOR(
ID_AP NVARCHAR2(10) PRIMARY KEY,
ID_ASUNTO NVARCHAR2(50),
ID_PROCURADOR NVARCHAR2(10)
);


--EJERCICIO 3 CLUB NAUTICO

CREATE TABLE SOCIO(
ID_SOCIO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE SOCIO_SEQ;

CREATE TRIGGER INSERT_SOCIO
BEFORE INSERT ON SOCIO FOR EACH ROW BEGIN
SELECT SOCIO_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL;
END;

CREATE TABLE BARCO(
ID_BARCO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
NUM_AMARRE NUMBER,
CUOTA NUMBER(8,2)
);
 
CREATE SEQUENCE BARCO_SEQ;

CREATE TRIGGER INSERT_BARCO
BEFORE INSERT ON BARCO FOR EACH ROW BEGIN
SELECT BARCO_SEQ.NEXTVAL INTO:NEW.ID_BARCO FROM DUAL;
END;

DROP TRIGGER INSERT_BARCO;

CREATE TABLE PATRON(
ID_PATRON NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE PATRON_SEQ;

CREATE TRIGGER INSERT_PATRON
BEFORE INSERT ON PATRON FOR EACH ROW BEGIN
SELECT PATRON_SEQ.NEXTVAL INTO:NEW.ID_PATRON FROM DUAL;
END;

CREATE TABLE SOCIOS_BARCO(
ID_SB NUMBER PRIMARY KEY,
ID_SOCIO NUMBER,
ID_BARCO NUMBER,
CONSTRAINT FK_ID_SOCIO
FOREIGN KEY (ID_SOCIO)
REFERENCES SOCIO(ID_SOCIO),
CONSTRAINT FK_ID_BARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO)
);

CREATE SEQUENCE SOCIOSBARCO_SEQ;

CREATE TRIGGER INSERT_SOCIOSBARCO
BEFORE INSERT ON SOCIOS_BARCO FOR EACH ROW BEGIN
SELECT SOCIOSBARCO_SEQ.NEXTVAL INTO:NEW.ID_SB FROM DUAL;
END;

CREATE TABLE SALIDAS(
ID_SALIDA NUMBER PRIMARY KEY,
DESTINO NVARCHAR2(30),
FECHASALIDA DATE,
ID_BARCO NUMBER,
ID_PATRON NUMBER,
CONSTRAINT FK_IDBARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO(ID_BARCO),
CONSTRAINT FK_IDPATRON
FOREIGN KEY (ID_PATRON)
REFERENCES PATRON(ID_PATRON)
);

CREATE SEQUENCE SALIDASBARCO_SEQ;

CREATE TRIGGER INSERT_SALIDASBARCO
BEFORE INSERT ON SALIDAS FOR EACH ROW BEGIN
SELECT SALIDASBARCO_SEQ.NEXTVAL INTO:NEW.ID_SALIDA FROM DUAL;
END;
COMMIT;

-- INSERTAR DATOS EN LAS DIFERENTES TABLAS SOCIO... PATRON... BARCO ...SOCIOS_BARCO
INSERT ALL
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ESMERALDA','ACAPULCO','7441234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('JOSE DAVID','CHIAPAS','9631234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('JONATHAN','ACAPULCO','6441234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ANTONIO','ACAPULCO','7441234567')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALEX','ACAPULCO','5441234567')
SELECT * FROM DUAL;

INSERT ALL
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN PABLO','MORELOS','3781234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('MARICELA','EDOMEX','5531234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALFONSO','EDOMEX','5541234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('JUAN OSMAR','VERACRUZ','2791234567')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO) VALUES ('RAFAEL','ACAPULCO','4441234567')
SELECT * FROM DUAL;

DESCRIBE BARCO;

INSERT ALL
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA NIÑA',101,1200.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA PINTA',102,1800.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA SANTA MARIA',103,2000.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('PERLA NEGRA',104,5500.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('EL HOLANDES',105,3200.50)
SELECT * FROM DUAL;
COMMIT;

INSERT ALL 
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (1,5)
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (2,4)
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (3,1)
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (4,2)
INTO SOCIOS_BARCO (ID_SOCIO, ID_BARCO) VALUES (5,1)
SELECT * FROM DUAL;

INSERT ALL 
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON)
VALUES ('VERACRUZ', TO_DATE('16/06/2023 08:00:00', 'DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON)
VALUES ('VILLAHERMOSA', TO_DATE('17/06/2023 08:00:00', 'DD-MM-YYYY HH24:MI:SS'),2,2)
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON)
VALUES ('CAMPECHE', TO_DATE('18/06/2023 08:00:00', 'DD-MM-YYYY HH24:MI:SS'),3,3)
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON)
VALUES ('YUCATAN', TO_DATE('19/06/2023 08:00:00', 'DD-MM-YYYY HH24:MI:SS'),4,4)
INTO SALIDAS (DESTINO, FECHASALIDA, ID_BARCO, ID_PATRON)
VALUES ('CANCUN', TO_DATE('20/06/2023 08:00:00', 'DD-MM-YYYY HH24:MI:SS'),5,5)
SELECT * FROM DUAL;

COMMIT;

--CONSULTAR HORA Y FECHA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA,'DD-MM-YYYY HH24:MI:SS') FROM SALIDAS; 
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHASALIDA,'HH24:MI:SS') FROM SALIDAS; 

--SENTENCIA PARA BORRAR REGISTROS ES... DELETE FROM
--DELETE FROM SALIDAS WHERE ID_SALIDA=5;  --ROLLBACK;... ES PARA REGRESAR LO QUE BORRAMOS


-- CONSULTA DE CONDICION
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA>3000;
-- CONSULTA CON MAS CONDICIONES
SELECT ID_BARCO, NOMBRE FROM BARCO WHERE CUOTA>3000 AND NOMBRE='PERLA NEGRA';
-- CONSULTA PARA BUSCAR RANGOS
SELECT * FROM BARCO WHERE CUOTA BETWEEN 1000 AND 3000;
COMMIT;
--buscar valores similares
SELECT * FROM ALUMNO WHERE NOMBRE LIKE 'E%';
SELECT * FROM ALUMNO WHERE NOMBRE LIKE '%O';
--CONSULTA CON VALORES MAXIMOS Y MINIMOS
SELECT MAX(CUOTA) FROM BARCO;
SELECT MIN(CUOTA) FROM BARCO;
-- BUSCAR BARCO CON MAYOR CUOTA(FUNCIONES DE AGREGACION)ES LO MISMO QUE ARRIBA
SELECT * FROM BARCO WHERE CUOTA= (SELECT MAX(CUOTA) FROM BARCO);
--CONTEO DE FILAS  PARA DETERMINADOS DATOS
SELECT COUNT (ID_BARCO) FROM BARCO WHERE CUOTA<3000;
--OBTENER PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (CUOTA) FROM BARCO;
--SUMA DE VALORES
SELECT SUM(CUOTA) FROM BARCO;
--FUNCIONES PARA AGRUPAR.. GROUP BY
--REALIZAR UN CONTEO DE ALUMNOS Y CUANTOS HAY POR GENERO
SELECT COUNT (ID_ALUMNO),GENERO FROM ALUMNO GROUP BY GENERO; --ESTUDIAR OJO
SELECT * FROM ALUMNO;
--ORDEN ASCENDENTE O DESCENDENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;
SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;
--MOSTRAR EL TOTAL DE REGISTROS DE UNA TABLA
SELECT COUNT(ID_ALUMNO) FROM ALUMNO;
--EJ CONSULTA DE DATOS..
--BUSCAR DATOS DE PATRON QUE HAYA ESTADO EN LA SALIDA CON EL BARCO
--QUE PERTENECE AL SOCIO1
SELECT * FROM PATRON WHERE ID_PATRON=4;
COMMIT;

SELECT * FROM PATRON 
WHERE ID_PATRON = 
(SELECT ID_PATRON FROM SALIDAS WHERE ID_BARCO = 
(SELECT ID_BARCO FROM SOCIOS_BARCO WHERE ID_SOCIO= 1));
--CON JOIN HACER CONSILTAS Y APARTE PONIENDO ALIAS PARA AHORRAR ESPACIO
SELECT *FROM ALUMNO A
INNER JOIN CARRERAS_ALUMNOS CA
ON A.ID_ALUMNO = CA.ID_ALUMNO
INNER JOIN CARRERAS C
ON CA.ID_CARRERA = C.ID_CARRERA;
--LEFT JOIN   muestra la tabla que tiene prioridas
SELECT * FROM ALUMNO  
LEFT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;
--RIGHT lo contrario
SELECT * FROM ALUMNO  
RIGHT JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;
-- LA TABLA LEFT JOIN MUESTRA ALA IZQUIERDA    RIGHT JOIN  ALA DERECHA
-- FULL OUTER JOIN  muestra todo de las tablas tengamos coincidencia o no
SELECT * FROM ALUMNO  
FULL OUTER JOIN CARRERAS_ALUMNOS
ON ALUMNO.ID_ALUMNO = CARRERAS_ALUMNOS.ID_ALUMNO;

--RESOLVIENDO CON JOIN EL EJER 3
SELECT * FROM PATRON P 
INNER JOIN SALIDAS S
ON P.ID_PATRON=S.ID_PATRON
INNER JOIN SOCIOS_BARCO SB
ON SB.ID_BARCO=S.ID_BARCO
WHERE SB.ID_SOCIO=1;
COMMIT;

SELECT P.ID_PATRON, P.NOMBRE P 
INNER JOIN SALIDAS S
ON P.ID_PATRON=S.ID_PATRON
INNER JOIN SOCIOS_BARCO SB
ON SB.ID_BARCO=S.ID_BARCO
WHERE SB.ID_SOCIO=1;

COMMIT;







